/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.node;

import sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AOrExpCompExp extends PCompExp
{
    private PCompExp _compExp1_;
    private PCompExp _compExp2_;

    public AOrExpCompExp()
    {
        // Constructor
    }

    public AOrExpCompExp(
        @SuppressWarnings("hiding") PCompExp _compExp1_,
        @SuppressWarnings("hiding") PCompExp _compExp2_)
    {
        // Constructor
        setCompExp1(_compExp1_);

        setCompExp2(_compExp2_);

    }

    @Override
    public Object clone()
    {
        return new AOrExpCompExp(
            cloneNode(this._compExp1_),
            cloneNode(this._compExp2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrExpCompExp(this);
    }

    public PCompExp getCompExp1()
    {
        return this._compExp1_;
    }

    public void setCompExp1(PCompExp node)
    {
        if(this._compExp1_ != null)
        {
            this._compExp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compExp1_ = node;
    }

    public PCompExp getCompExp2()
    {
        return this._compExp2_;
    }

    public void setCompExp2(PCompExp node)
    {
        if(this._compExp2_ != null)
        {
            this._compExp2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compExp2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._compExp1_)
            + toString(this._compExp2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._compExp1_ == child)
        {
            this._compExp1_ = null;
            return;
        }

        if(this._compExp2_ == child)
        {
            this._compExp2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._compExp1_ == oldChild)
        {
            setCompExp1((PCompExp) newChild);
            return;
        }

        if(this._compExp2_ == oldChild)
        {
            setCompExp2((PCompExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
