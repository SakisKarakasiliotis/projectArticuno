/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.node;

import sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AOrExpCompExp extends PCompExp
{
    private PCompExp _compExp_;
    private TKwOr _kwOr_;
    private PCompTerm _compTerm_;

    public AOrExpCompExp()
    {
        // Constructor
    }

    public AOrExpCompExp(
        @SuppressWarnings("hiding") PCompExp _compExp_,
        @SuppressWarnings("hiding") TKwOr _kwOr_,
        @SuppressWarnings("hiding") PCompTerm _compTerm_)
    {
        // Constructor
        setCompExp(_compExp_);

        setKwOr(_kwOr_);

        setCompTerm(_compTerm_);

    }

    @Override
    public Object clone()
    {
        return new AOrExpCompExp(
            cloneNode(this._compExp_),
            cloneNode(this._kwOr_),
            cloneNode(this._compTerm_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrExpCompExp(this);
    }

    public PCompExp getCompExp()
    {
        return this._compExp_;
    }

    public void setCompExp(PCompExp node)
    {
        if(this._compExp_ != null)
        {
            this._compExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compExp_ = node;
    }

    public TKwOr getKwOr()
    {
        return this._kwOr_;
    }

    public void setKwOr(TKwOr node)
    {
        if(this._kwOr_ != null)
        {
            this._kwOr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwOr_ = node;
    }

    public PCompTerm getCompTerm()
    {
        return this._compTerm_;
    }

    public void setCompTerm(PCompTerm node)
    {
        if(this._compTerm_ != null)
        {
            this._compTerm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compTerm_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._compExp_)
            + toString(this._kwOr_)
            + toString(this._compTerm_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._compExp_ == child)
        {
            this._compExp_ = null;
            return;
        }

        if(this._kwOr_ == child)
        {
            this._kwOr_ = null;
            return;
        }

        if(this._compTerm_ == child)
        {
            this._compTerm_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._compExp_ == oldChild)
        {
            setCompExp((PCompExp) newChild);
            return;
        }

        if(this._kwOr_ == oldChild)
        {
            setKwOr((TKwOr) newChild);
            return;
        }

        if(this._compTerm_ == oldChild)
        {
            setCompTerm((PCompTerm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
