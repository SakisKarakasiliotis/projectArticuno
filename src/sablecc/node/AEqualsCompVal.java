/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.node;

import sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AEqualsCompVal extends PCompVal
{
    private PCompVal _compVal1_;
    private PCompFinal _compVal2_;

    public AEqualsCompVal()
    {
        // Constructor
    }

    public AEqualsCompVal(
        @SuppressWarnings("hiding") PCompVal _compVal1_,
        @SuppressWarnings("hiding") PCompFinal _compVal2_)
    {
        // Constructor
        setCompVal1(_compVal1_);

        setCompVal2(_compVal2_);

    }

    @Override
    public Object clone()
    {
        return new AEqualsCompVal(
            cloneNode(this._compVal1_),
            cloneNode(this._compVal2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEqualsCompVal(this);
    }

    public PCompVal getCompVal1()
    {
        return this._compVal1_;
    }

    public void setCompVal1(PCompVal node)
    {
        if(this._compVal1_ != null)
        {
            this._compVal1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compVal1_ = node;
    }

    public PCompFinal getCompVal2()
    {
        return this._compVal2_;
    }

    public void setCompVal2(PCompFinal node)
    {
        if(this._compVal2_ != null)
        {
            this._compVal2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compVal2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._compVal1_)
            + toString(this._compVal2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._compVal1_ == child)
        {
            this._compVal1_ = null;
            return;
        }

        if(this._compVal2_ == child)
        {
            this._compVal2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._compVal1_ == oldChild)
        {
            setCompVal1((PCompVal) newChild);
            return;
        }

        if(this._compVal2_ == oldChild)
        {
            setCompVal2((PCompFinal) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
