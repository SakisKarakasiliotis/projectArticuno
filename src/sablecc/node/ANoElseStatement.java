/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.node;

import sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ANoElseStatement extends PStatement
{
    private PCondition _condition_;
    private PStatement _thenStmt_;

    public ANoElseStatement()
    {
        // Constructor
    }

    public ANoElseStatement(
        @SuppressWarnings("hiding") PCondition _condition_,
        @SuppressWarnings("hiding") PStatement _thenStmt_)
    {
        // Constructor
        setCondition(_condition_);

        setThenStmt(_thenStmt_);

    }

    @Override
    public Object clone()
    {
        return new ANoElseStatement(
            cloneNode(this._condition_),
            cloneNode(this._thenStmt_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANoElseStatement(this);
    }

    public PCondition getCondition()
    {
        return this._condition_;
    }

    public void setCondition(PCondition node)
    {
        if(this._condition_ != null)
        {
            this._condition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condition_ = node;
    }

    public PStatement getThenStmt()
    {
        return this._thenStmt_;
    }

    public void setThenStmt(PStatement node)
    {
        if(this._thenStmt_ != null)
        {
            this._thenStmt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenStmt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._condition_)
            + toString(this._thenStmt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._condition_ == child)
        {
            this._condition_ = null;
            return;
        }

        if(this._thenStmt_ == child)
        {
            this._thenStmt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._condition_ == oldChild)
        {
            setCondition((PCondition) newChild);
            return;
        }

        if(this._thenStmt_ == oldChild)
        {
            setThenStmt((PStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
