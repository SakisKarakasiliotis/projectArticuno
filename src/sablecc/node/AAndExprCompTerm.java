/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.node;

import sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AAndExprCompTerm extends PCompTerm
{
    private PCompTerm _compTerm_;
    private TKwAnd _kwAnd_;
    private PCompFun _compFun_;

    public AAndExprCompTerm()
    {
        // Constructor
    }

    public AAndExprCompTerm(
        @SuppressWarnings("hiding") PCompTerm _compTerm_,
        @SuppressWarnings("hiding") TKwAnd _kwAnd_,
        @SuppressWarnings("hiding") PCompFun _compFun_)
    {
        // Constructor
        setCompTerm(_compTerm_);

        setKwAnd(_kwAnd_);

        setCompFun(_compFun_);

    }

    @Override
    public Object clone()
    {
        return new AAndExprCompTerm(
            cloneNode(this._compTerm_),
            cloneNode(this._kwAnd_),
            cloneNode(this._compFun_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndExprCompTerm(this);
    }

    public PCompTerm getCompTerm()
    {
        return this._compTerm_;
    }

    public void setCompTerm(PCompTerm node)
    {
        if(this._compTerm_ != null)
        {
            this._compTerm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compTerm_ = node;
    }

    public TKwAnd getKwAnd()
    {
        return this._kwAnd_;
    }

    public void setKwAnd(TKwAnd node)
    {
        if(this._kwAnd_ != null)
        {
            this._kwAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwAnd_ = node;
    }

    public PCompFun getCompFun()
    {
        return this._compFun_;
    }

    public void setCompFun(PCompFun node)
    {
        if(this._compFun_ != null)
        {
            this._compFun_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compFun_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._compTerm_)
            + toString(this._kwAnd_)
            + toString(this._compFun_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._compTerm_ == child)
        {
            this._compTerm_ = null;
            return;
        }

        if(this._kwAnd_ == child)
        {
            this._kwAnd_ = null;
            return;
        }

        if(this._compFun_ == child)
        {
            this._compFun_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._compTerm_ == oldChild)
        {
            setCompTerm((PCompTerm) newChild);
            return;
        }

        if(this._kwAnd_ == oldChild)
        {
            setKwAnd((TKwAnd) newChild);
            return;
        }

        if(this._compFun_ == oldChild)
        {
            setCompFun((PCompFun) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
