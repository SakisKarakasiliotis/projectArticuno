/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.node;

import sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ATermModNExp extends PNExp
{
    private PNExp _nExp1_;
    private PNExp _nExp2_;

    public ATermModNExp()
    {
        // Constructor
    }

    public ATermModNExp(
        @SuppressWarnings("hiding") PNExp _nExp1_,
        @SuppressWarnings("hiding") PNExp _nExp2_)
    {
        // Constructor
        setNExp1(_nExp1_);

        setNExp2(_nExp2_);

    }

    @Override
    public Object clone()
    {
        return new ATermModNExp(
            cloneNode(this._nExp1_),
            cloneNode(this._nExp2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATermModNExp(this);
    }

    public PNExp getNExp1()
    {
        return this._nExp1_;
    }

    public void setNExp1(PNExp node)
    {
        if(this._nExp1_ != null)
        {
            this._nExp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nExp1_ = node;
    }

    public PNExp getNExp2()
    {
        return this._nExp2_;
    }

    public void setNExp2(PNExp node)
    {
        if(this._nExp2_ != null)
        {
            this._nExp2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nExp2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._nExp1_)
            + toString(this._nExp2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._nExp1_ == child)
        {
            this._nExp1_ = null;
            return;
        }

        if(this._nExp2_ == child)
        {
            this._nExp2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._nExp1_ == oldChild)
        {
            setNExp1((PNExp) newChild);
            return;
        }

        if(this._nExp2_ == oldChild)
        {
            setNExp2((PNExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
