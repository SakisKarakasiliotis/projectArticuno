/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.node;

import java.util.*;
import sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AVarDefinition extends PVarDefinition
{
    private TKwVar _kwVar_;
    private TIdentifier _identifier_;
    private final LinkedList<PNextIdentifier> _nextIdentifier_ = new LinkedList<PNextIdentifier>();
    private TColon _colon_;
    private PType _type_;
    private TSemicolon _semicolon_;

    public AVarDefinition()
    {
        // Constructor
    }

    public AVarDefinition(
        @SuppressWarnings("hiding") TKwVar _kwVar_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") List<?> _nextIdentifier_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setKwVar(_kwVar_);

        setIdentifier(_identifier_);

        setNextIdentifier(_nextIdentifier_);

        setColon(_colon_);

        setType(_type_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AVarDefinition(
            cloneNode(this._kwVar_),
            cloneNode(this._identifier_),
            cloneList(this._nextIdentifier_),
            cloneNode(this._colon_),
            cloneNode(this._type_),
            cloneNode(this._semicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVarDefinition(this);
    }

    public TKwVar getKwVar()
    {
        return this._kwVar_;
    }

    public void setKwVar(TKwVar node)
    {
        if(this._kwVar_ != null)
        {
            this._kwVar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwVar_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public LinkedList<PNextIdentifier> getNextIdentifier()
    {
        return this._nextIdentifier_;
    }

    public void setNextIdentifier(List<?> list)
    {
        for(PNextIdentifier e : this._nextIdentifier_)
        {
            e.parent(null);
        }
        this._nextIdentifier_.clear();

        for(Object obj_e : list)
        {
            PNextIdentifier e = (PNextIdentifier) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._nextIdentifier_.add(e);
        }
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kwVar_)
            + toString(this._identifier_)
            + toString(this._nextIdentifier_)
            + toString(this._colon_)
            + toString(this._type_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kwVar_ == child)
        {
            this._kwVar_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._nextIdentifier_.remove(child))
        {
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kwVar_ == oldChild)
        {
            setKwVar((TKwVar) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        for(ListIterator<PNextIdentifier> i = this._nextIdentifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PNextIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
