/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.node;

import sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ANotLogicOperations extends PLogicOperations
{
    private TKwNot _kwNot_;

    public ANotLogicOperations()
    {
        // Constructor
    }

    public ANotLogicOperations(
        @SuppressWarnings("hiding") TKwNot _kwNot_)
    {
        // Constructor
        setKwNot(_kwNot_);

    }

    @Override
    public Object clone()
    {
        return new ANotLogicOperations(
            cloneNode(this._kwNot_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANotLogicOperations(this);
    }

    public TKwNot getKwNot()
    {
        return this._kwNot_;
    }

    public void setKwNot(TKwNot node)
    {
        if(this._kwNot_ != null)
        {
            this._kwNot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwNot_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kwNot_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kwNot_ == child)
        {
            this._kwNot_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kwNot_ == oldChild)
        {
            setKwNot((TKwNot) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
