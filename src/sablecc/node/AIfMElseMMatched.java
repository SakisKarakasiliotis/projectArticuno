/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.node;

import sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AIfMElseMMatched extends PMatched
{
    private TIf _if_;
    private PCondition _condition_;
    private PMatched _ifMatched_;
    private TElse _else_;
    private PMatched _elseMatched_;

    public AIfMElseMMatched()
    {
        // Constructor
    }

    public AIfMElseMMatched(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PCondition _condition_,
        @SuppressWarnings("hiding") PMatched _ifMatched_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PMatched _elseMatched_)
    {
        // Constructor
        setIf(_if_);

        setCondition(_condition_);

        setIfMatched(_ifMatched_);

        setElse(_else_);

        setElseMatched(_elseMatched_);

    }

    @Override
    public Object clone()
    {
        return new AIfMElseMMatched(
            cloneNode(this._if_),
            cloneNode(this._condition_),
            cloneNode(this._ifMatched_),
            cloneNode(this._else_),
            cloneNode(this._elseMatched_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfMElseMMatched(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PCondition getCondition()
    {
        return this._condition_;
    }

    public void setCondition(PCondition node)
    {
        if(this._condition_ != null)
        {
            this._condition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condition_ = node;
    }

    public PMatched getIfMatched()
    {
        return this._ifMatched_;
    }

    public void setIfMatched(PMatched node)
    {
        if(this._ifMatched_ != null)
        {
            this._ifMatched_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifMatched_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PMatched getElseMatched()
    {
        return this._elseMatched_;
    }

    public void setElseMatched(PMatched node)
    {
        if(this._elseMatched_ != null)
        {
            this._elseMatched_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseMatched_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._condition_)
            + toString(this._ifMatched_)
            + toString(this._else_)
            + toString(this._elseMatched_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._condition_ == child)
        {
            this._condition_ = null;
            return;
        }

        if(this._ifMatched_ == child)
        {
            this._ifMatched_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._elseMatched_ == child)
        {
            this._elseMatched_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._condition_ == oldChild)
        {
            setCondition((PCondition) newChild);
            return;
        }

        if(this._ifMatched_ == oldChild)
        {
            setIfMatched((PMatched) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._elseMatched_ == oldChild)
        {
            setElseMatched((PMatched) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
