/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.node;

import sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AComparisonCondition extends PCondition
{
    private PExpression _first_;
    private PComparisonSymbols _comparisonSymbols_;
    private PExpression _second_;

    public AComparisonCondition()
    {
        // Constructor
    }

    public AComparisonCondition(
        @SuppressWarnings("hiding") PExpression _first_,
        @SuppressWarnings("hiding") PComparisonSymbols _comparisonSymbols_,
        @SuppressWarnings("hiding") PExpression _second_)
    {
        // Constructor
        setFirst(_first_);

        setComparisonSymbols(_comparisonSymbols_);

        setSecond(_second_);

    }

    @Override
    public Object clone()
    {
        return new AComparisonCondition(
            cloneNode(this._first_),
            cloneNode(this._comparisonSymbols_),
            cloneNode(this._second_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComparisonCondition(this);
    }

    public PExpression getFirst()
    {
        return this._first_;
    }

    public void setFirst(PExpression node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public PComparisonSymbols getComparisonSymbols()
    {
        return this._comparisonSymbols_;
    }

    public void setComparisonSymbols(PComparisonSymbols node)
    {
        if(this._comparisonSymbols_ != null)
        {
            this._comparisonSymbols_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comparisonSymbols_ = node;
    }

    public PExpression getSecond()
    {
        return this._second_;
    }

    public void setSecond(PExpression node)
    {
        if(this._second_ != null)
        {
            this._second_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._second_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._first_)
            + toString(this._comparisonSymbols_)
            + toString(this._second_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._comparisonSymbols_ == child)
        {
            this._comparisonSymbols_ = null;
            return;
        }

        if(this._second_ == child)
        {
            this._second_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._first_ == oldChild)
        {
            setFirst((PExpression) newChild);
            return;
        }

        if(this._comparisonSymbols_ == oldChild)
        {
            setComparisonSymbols((PComparisonSymbols) newChild);
            return;
        }

        if(this._second_ == oldChild)
        {
            setSecond((PExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
