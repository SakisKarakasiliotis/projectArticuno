/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.node;

import java.util.*;
import sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AHeader extends PHeader
{
    private TKwFun _kwFun_;
    private TIdentifier _identifier_;
    private TLparen _lparen_;
    private PFparDefinition _fparDefinition_;
    private final LinkedList<PNextFparDefinition> _nextFparDefinition_ = new LinkedList<PNextFparDefinition>();
    private TRparen _rparen_;
    private TColon _colon_;
    private PRetType _retType_;

    public AHeader()
    {
        // Constructor
    }

    public AHeader(
        @SuppressWarnings("hiding") TKwFun _kwFun_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TLparen _lparen_,
        @SuppressWarnings("hiding") PFparDefinition _fparDefinition_,
        @SuppressWarnings("hiding") List<?> _nextFparDefinition_,
        @SuppressWarnings("hiding") TRparen _rparen_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PRetType _retType_)
    {
        // Constructor
        setKwFun(_kwFun_);

        setIdentifier(_identifier_);

        setLparen(_lparen_);

        setFparDefinition(_fparDefinition_);

        setNextFparDefinition(_nextFparDefinition_);

        setRparen(_rparen_);

        setColon(_colon_);

        setRetType(_retType_);

    }

    @Override
    public Object clone()
    {
        return new AHeader(
            cloneNode(this._kwFun_),
            cloneNode(this._identifier_),
            cloneNode(this._lparen_),
            cloneNode(this._fparDefinition_),
            cloneList(this._nextFparDefinition_),
            cloneNode(this._rparen_),
            cloneNode(this._colon_),
            cloneNode(this._retType_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHeader(this);
    }

    public TKwFun getKwFun()
    {
        return this._kwFun_;
    }

    public void setKwFun(TKwFun node)
    {
        if(this._kwFun_ != null)
        {
            this._kwFun_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwFun_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TLparen getLparen()
    {
        return this._lparen_;
    }

    public void setLparen(TLparen node)
    {
        if(this._lparen_ != null)
        {
            this._lparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lparen_ = node;
    }

    public PFparDefinition getFparDefinition()
    {
        return this._fparDefinition_;
    }

    public void setFparDefinition(PFparDefinition node)
    {
        if(this._fparDefinition_ != null)
        {
            this._fparDefinition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fparDefinition_ = node;
    }

    public LinkedList<PNextFparDefinition> getNextFparDefinition()
    {
        return this._nextFparDefinition_;
    }

    public void setNextFparDefinition(List<?> list)
    {
        for(PNextFparDefinition e : this._nextFparDefinition_)
        {
            e.parent(null);
        }
        this._nextFparDefinition_.clear();

        for(Object obj_e : list)
        {
            PNextFparDefinition e = (PNextFparDefinition) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._nextFparDefinition_.add(e);
        }
    }

    public TRparen getRparen()
    {
        return this._rparen_;
    }

    public void setRparen(TRparen node)
    {
        if(this._rparen_ != null)
        {
            this._rparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rparen_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PRetType getRetType()
    {
        return this._retType_;
    }

    public void setRetType(PRetType node)
    {
        if(this._retType_ != null)
        {
            this._retType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._retType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kwFun_)
            + toString(this._identifier_)
            + toString(this._lparen_)
            + toString(this._fparDefinition_)
            + toString(this._nextFparDefinition_)
            + toString(this._rparen_)
            + toString(this._colon_)
            + toString(this._retType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kwFun_ == child)
        {
            this._kwFun_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._lparen_ == child)
        {
            this._lparen_ = null;
            return;
        }

        if(this._fparDefinition_ == child)
        {
            this._fparDefinition_ = null;
            return;
        }

        if(this._nextFparDefinition_.remove(child))
        {
            return;
        }

        if(this._rparen_ == child)
        {
            this._rparen_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._retType_ == child)
        {
            this._retType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kwFun_ == oldChild)
        {
            setKwFun((TKwFun) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._lparen_ == oldChild)
        {
            setLparen((TLparen) newChild);
            return;
        }

        if(this._fparDefinition_ == oldChild)
        {
            setFparDefinition((PFparDefinition) newChild);
            return;
        }

        for(ListIterator<PNextFparDefinition> i = this._nextFparDefinition_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PNextFparDefinition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rparen_ == oldChild)
        {
            setRparen((TRparen) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._retType_ == oldChild)
        {
            setRetType((PRetType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
