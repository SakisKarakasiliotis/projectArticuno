/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.analysis;

import java.util.*;
import sablecc.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getFunctionDefinition() != null)
        {
            node.getFunctionDefinition().apply(this);
        }
        outAProgram(node);
    }

    public void inAFunctionDefinition(AFunctionDefinition node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefinition(AFunctionDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDefinition(AFunctionDefinition node)
    {
        inAFunctionDefinition(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        {
            List<PLocalDefinition> copy = new ArrayList<PLocalDefinition>(node.getLocalDefinition());
            Collections.reverse(copy);
            for(PLocalDefinition e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        outAFunctionDefinition(node);
    }

    public void inAHeader(AHeader node)
    {
        defaultIn(node);
    }

    public void outAHeader(AHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeader(AHeader node)
    {
        inAHeader(node);
        if(node.getRetType() != null)
        {
            node.getRetType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        {
            List<PNextFparDefinition> copy = new ArrayList<PNextFparDefinition>(node.getNextFparDefinition());
            Collections.reverse(copy);
            for(PNextFparDefinition e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFparDefinition() != null)
        {
            node.getFparDefinition().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getKwFun() != null)
        {
            node.getKwFun().apply(this);
        }
        outAHeader(node);
    }

    public void inAFDefLocalDefinition(AFDefLocalDefinition node)
    {
        defaultIn(node);
    }

    public void outAFDefLocalDefinition(AFDefLocalDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFDefLocalDefinition(AFDefLocalDefinition node)
    {
        inAFDefLocalDefinition(node);
        if(node.getFunctionDefinition() != null)
        {
            node.getFunctionDefinition().apply(this);
        }
        outAFDefLocalDefinition(node);
    }

    public void inAFDeclLocalDefinition(AFDeclLocalDefinition node)
    {
        defaultIn(node);
    }

    public void outAFDeclLocalDefinition(AFDeclLocalDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFDeclLocalDefinition(AFDeclLocalDefinition node)
    {
        inAFDeclLocalDefinition(node);
        if(node.getFunctionDeclaration() != null)
        {
            node.getFunctionDeclaration().apply(this);
        }
        outAFDeclLocalDefinition(node);
    }

    public void inAVarDefLocalDefinition(AVarDefLocalDefinition node)
    {
        defaultIn(node);
    }

    public void outAVarDefLocalDefinition(AVarDefLocalDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDefLocalDefinition(AVarDefLocalDefinition node)
    {
        inAVarDefLocalDefinition(node);
        if(node.getVarDefinition() != null)
        {
            node.getVarDefinition().apply(this);
        }
        outAVarDefLocalDefinition(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        outABlock(node);
    }

    public void inAFparDefinition(AFparDefinition node)
    {
        defaultIn(node);
    }

    public void outAFparDefinition(AFparDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparDefinition(AFparDefinition node)
    {
        inAFparDefinition(node);
        if(node.getFparType() != null)
        {
            node.getFparType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        {
            List<PNextIdentifier> copy = new ArrayList<PNextIdentifier>(node.getNextIdentifier());
            Collections.reverse(copy);
            for(PNextIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getKwRef() != null)
        {
            node.getKwRef().apply(this);
        }
        outAFparDefinition(node);
    }

    public void inANextFparDefinition(ANextFparDefinition node)
    {
        defaultIn(node);
    }

    public void outANextFparDefinition(ANextFparDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextFparDefinition(ANextFparDefinition node)
    {
        inANextFparDefinition(node);
        if(node.getFparDefinition() != null)
        {
            node.getFparDefinition().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outANextFparDefinition(node);
    }

    public void inADataTypeRetType(ADataTypeRetType node)
    {
        defaultIn(node);
    }

    public void outADataTypeRetType(ADataTypeRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataTypeRetType(ADataTypeRetType node)
    {
        inADataTypeRetType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outADataTypeRetType(node);
    }

    public void inANothingRetType(ANothingRetType node)
    {
        defaultIn(node);
    }

    public void outANothingRetType(ANothingRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANothingRetType(ANothingRetType node)
    {
        inANothingRetType(node);
        if(node.getKwNothing() != null)
        {
            node.getKwNothing().apply(this);
        }
        outANothingRetType(node);
    }

    public void inAIntegerDataType(AIntegerDataType node)
    {
        defaultIn(node);
    }

    public void outAIntegerDataType(AIntegerDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerDataType(AIntegerDataType node)
    {
        inAIntegerDataType(node);
        if(node.getKwInt() != null)
        {
            node.getKwInt().apply(this);
        }
        outAIntegerDataType(node);
    }

    public void inACharacterDataType(ACharacterDataType node)
    {
        defaultIn(node);
    }

    public void outACharacterDataType(ACharacterDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharacterDataType(ACharacterDataType node)
    {
        inACharacterDataType(node);
        if(node.getKwChar() != null)
        {
            node.getKwChar().apply(this);
        }
        outACharacterDataType(node);
    }

    public void inAType(AType node)
    {
        defaultIn(node);
    }

    public void outAType(AType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAType(AType node)
    {
        inAType(node);
        {
            List<PArraySize> copy = new ArrayList<PArraySize>(node.getArraySize());
            Collections.reverse(copy);
            for(PArraySize e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outAType(node);
    }

    public void inAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDeclaration(AFunctionDeclaration node)
    {
        inAFunctionDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        outAFunctionDeclaration(node);
    }

    public void inAFparType(AFparType node)
    {
        defaultIn(node);
    }

    public void outAFparType(AFparType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparType(AFparType node)
    {
        inAFparType(node);
        {
            List<PArraySize> copy = new ArrayList<PArraySize>(node.getArraySize());
            Collections.reverse(copy);
            for(PArraySize e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEmptyBrackets() != null)
        {
            node.getEmptyBrackets().apply(this);
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outAFparType(node);
    }

    public void inAVarDefinition(AVarDefinition node)
    {
        defaultIn(node);
    }

    public void outAVarDefinition(AVarDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDefinition(AVarDefinition node)
    {
        inAVarDefinition(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        {
            List<PNextIdentifier> copy = new ArrayList<PNextIdentifier>(node.getNextIdentifier());
            Collections.reverse(copy);
            for(PNextIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getKwVar() != null)
        {
            node.getKwVar().apply(this);
        }
        outAVarDefinition(node);
    }

    public void inANextIdentifier(ANextIdentifier node)
    {
        defaultIn(node);
    }

    public void outANextIdentifier(ANextIdentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextIdentifier(ANextIdentifier node)
    {
        inANextIdentifier(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outANextIdentifier(node);
    }

    public void inANoopStatement(ANoopStatement node)
    {
        defaultIn(node);
    }

    public void outANoopStatement(ANoopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoopStatement(ANoopStatement node)
    {
        inANoopStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outANoopStatement(node);
    }

    public void inAAssignmentStatement(AAssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatement(AAssignmentStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStatement(AAssignmentStatement node)
    {
        inAAssignmentStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        outAAssignmentStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIfStmt() != null)
        {
            node.getIfStmt().apply(this);
        }
        outAIfStatement(node);
    }

    public void inABlockStatement(ABlockStatement node)
    {
        defaultIn(node);
    }

    public void outABlockStatement(ABlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStatement(ABlockStatement node)
    {
        inABlockStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStatement(node);
    }

    public void inAFCallStatement(AFCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFCallStatement(AFCallStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFCallStatement(AFCallStatement node)
    {
        inAFCallStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFCallStatement(node);
    }

    public void inAWhileDoStatement(AWhileDoStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileDoStatement(AWhileDoStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileDoStatement(AWhileDoStatement node)
    {
        inAWhileDoStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getKwDo() != null)
        {
            node.getKwDo().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getKwWhile() != null)
        {
            node.getKwWhile().apply(this);
        }
        outAWhileDoStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getKwReturn() != null)
        {
            node.getKwReturn().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inANoElseIfStmt(ANoElseIfStmt node)
    {
        defaultIn(node);
    }

    public void outANoElseIfStmt(ANoElseIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoElseIfStmt(ANoElseIfStmt node)
    {
        inANoElseIfStmt(node);
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
        }
        if(node.getKwThen() != null)
        {
            node.getKwThen().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getKwIf() != null)
        {
            node.getKwIf().apply(this);
        }
        outANoElseIfStmt(node);
    }

    public void inAWithElseIfStmt(AWithElseIfStmt node)
    {
        defaultIn(node);
    }

    public void outAWithElseIfStmt(AWithElseIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithElseIfStmt(AWithElseIfStmt node)
    {
        inAWithElseIfStmt(node);
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        if(node.getKwElse() != null)
        {
            node.getKwElse().apply(this);
        }
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
        }
        if(node.getKwThen() != null)
        {
            node.getKwThen().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getKwIf() != null)
        {
            node.getKwIf().apply(this);
        }
        outAWithElseIfStmt(node);
    }

    public void inANoopStmtWithElse(ANoopStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outANoopStmtWithElse(ANoopStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoopStmtWithElse(ANoopStmtWithElse node)
    {
        inANoopStmtWithElse(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outANoopStmtWithElse(node);
    }

    public void inAAssignmentStmtWithElse(AAssignmentStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStmtWithElse(AAssignmentStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStmtWithElse(AAssignmentStmtWithElse node)
    {
        inAAssignmentStmtWithElse(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        outAAssignmentStmtWithElse(node);
    }

    public void inAIfStmtWithElse(AIfStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAIfStmtWithElse(AIfStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmtWithElse(AIfStmtWithElse node)
    {
        inAIfStmtWithElse(node);
        if(node.getIfElseStmt() != null)
        {
            node.getIfElseStmt().apply(this);
        }
        outAIfStmtWithElse(node);
    }

    public void inABlockStmtWithElse(ABlockStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outABlockStmtWithElse(ABlockStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmtWithElse(ABlockStmtWithElse node)
    {
        inABlockStmtWithElse(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStmtWithElse(node);
    }

    public void inAFCallStmtWithElse(AFCallStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAFCallStmtWithElse(AFCallStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFCallStmtWithElse(AFCallStmtWithElse node)
    {
        inAFCallStmtWithElse(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFCallStmtWithElse(node);
    }

    public void inAWhileDoStmtWithElse(AWhileDoStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAWhileDoStmtWithElse(AWhileDoStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileDoStmtWithElse(AWhileDoStmtWithElse node)
    {
        inAWhileDoStmtWithElse(node);
        if(node.getStmtWithElse() != null)
        {
            node.getStmtWithElse().apply(this);
        }
        if(node.getKwDo() != null)
        {
            node.getKwDo().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getKwWhile() != null)
        {
            node.getKwWhile().apply(this);
        }
        outAWhileDoStmtWithElse(node);
    }

    public void inAReturnStmtWithElse(AReturnStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAReturnStmtWithElse(AReturnStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStmtWithElse(AReturnStmtWithElse node)
    {
        inAReturnStmtWithElse(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getKwReturn() != null)
        {
            node.getKwReturn().apply(this);
        }
        outAReturnStmtWithElse(node);
    }

    public void inAIfElseStmt(AIfElseStmt node)
    {
        defaultIn(node);
    }

    public void outAIfElseStmt(AIfElseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStmt(AIfElseStmt node)
    {
        inAIfElseStmt(node);
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        if(node.getKwElse() != null)
        {
            node.getKwElse().apply(this);
        }
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
        }
        if(node.getKwThen() != null)
        {
            node.getKwThen().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getKwIf() != null)
        {
            node.getKwIf().apply(this);
        }
        outAIfElseStmt(node);
    }

    public void inAFuncCall(AFuncCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCall(AFuncCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCall(AFuncCall node)
    {
        inAFuncCall(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getMultipleExpressions() != null)
        {
            node.getMultipleExpressions().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFuncCall(node);
    }

    public void inAIdentifierLValue(AIdentifierLValue node)
    {
        defaultIn(node);
    }

    public void outAIdentifierLValue(AIdentifierLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierLValue(AIdentifierLValue node)
    {
        inAIdentifierLValue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierLValue(node);
    }

    public void inAStringLitLValue(AStringLitLValue node)
    {
        defaultIn(node);
    }

    public void outAStringLitLValue(AStringLitLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLitLValue(AStringLitLValue node)
    {
        inAStringLitLValue(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringLitLValue(node);
    }

    public void inAArrayAssignLValue(AArrayAssignLValue node)
    {
        defaultIn(node);
    }

    public void outAArrayAssignLValue(AArrayAssignLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayAssignLValue(AArrayAssignLValue node)
    {
        inAArrayAssignLValue(node);
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        outAArrayAssignLValue(node);
    }

    public void inAArrayExpression(AArrayExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayExpression(AArrayExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExpression(AArrayExpression node)
    {
        inAArrayExpression(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        outAArrayExpression(node);
    }

    public void inAStringExpression(AStringExpression node)
    {
        defaultIn(node);
    }

    public void outAStringExpression(AStringExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExpression(AStringExpression node)
    {
        inAStringExpression(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringExpression(node);
    }

    public void inACharConstExpression(ACharConstExpression node)
    {
        defaultIn(node);
    }

    public void outACharConstExpression(ACharConstExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharConstExpression(ACharConstExpression node)
    {
        inACharConstExpression(node);
        if(node.getCharConst() != null)
        {
            node.getCharConst().apply(this);
        }
        outACharConstExpression(node);
    }

    public void inAFCallExpression(AFCallExpression node)
    {
        defaultIn(node);
    }

    public void outAFCallExpression(AFCallExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFCallExpression(AFCallExpression node)
    {
        inAFCallExpression(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFCallExpression(node);
    }

    public void inAParenExpressionExpression(AParenExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outAParenExpressionExpression(AParenExpressionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenExpressionExpression(AParenExpressionExpression node)
    {
        inAParenExpressionExpression(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getExpressionB() != null)
        {
            node.getExpressionB().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        outAParenExpressionExpression(node);
    }

    public void inASignedExpressionExpression(ASignedExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outASignedExpressionExpression(ASignedExpressionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignedExpressionExpression(ASignedExpressionExpression node)
    {
        inASignedExpressionExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSign() != null)
        {
            node.getSign().apply(this);
        }
        outASignedExpressionExpression(node);
    }

    public void inANumOperExpression(ANumOperExpression node)
    {
        defaultIn(node);
    }

    public void outANumOperExpression(ANumOperExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumOperExpression(ANumOperExpression node)
    {
        inANumOperExpression(node);
        if(node.getNExp() != null)
        {
            node.getNExp().apply(this);
        }
        outANumOperExpression(node);
    }

    public void inAArrayExpressionB(AArrayExpressionB node)
    {
        defaultIn(node);
    }

    public void outAArrayExpressionB(AArrayExpressionB node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExpressionB(AArrayExpressionB node)
    {
        inAArrayExpressionB(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        outAArrayExpressionB(node);
    }

    public void inAStringExpressionB(AStringExpressionB node)
    {
        defaultIn(node);
    }

    public void outAStringExpressionB(AStringExpressionB node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExpressionB(AStringExpressionB node)
    {
        inAStringExpressionB(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringExpressionB(node);
    }

    public void inACharConstExpressionB(ACharConstExpressionB node)
    {
        defaultIn(node);
    }

    public void outACharConstExpressionB(ACharConstExpressionB node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharConstExpressionB(ACharConstExpressionB node)
    {
        inACharConstExpressionB(node);
        if(node.getCharConst() != null)
        {
            node.getCharConst().apply(this);
        }
        outACharConstExpressionB(node);
    }

    public void inAFCallExpressionB(AFCallExpressionB node)
    {
        defaultIn(node);
    }

    public void outAFCallExpressionB(AFCallExpressionB node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFCallExpressionB(AFCallExpressionB node)
    {
        inAFCallExpressionB(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFCallExpressionB(node);
    }

    public void inASignedExpressionExpressionB(ASignedExpressionExpressionB node)
    {
        defaultIn(node);
    }

    public void outASignedExpressionExpressionB(ASignedExpressionExpressionB node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignedExpressionExpressionB(ASignedExpressionExpressionB node)
    {
        inASignedExpressionExpressionB(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSign() != null)
        {
            node.getSign().apply(this);
        }
        outASignedExpressionExpressionB(node);
    }

    public void inACondExpCondition(ACondExpCondition node)
    {
        defaultIn(node);
    }

    public void outACondExpCondition(ACondExpCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondExpCondition(ACondExpCondition node)
    {
        inACondExpCondition(node);
        if(node.getCompExp() != null)
        {
            node.getCompExp().apply(this);
        }
        outACondExpCondition(node);
    }

    public void inAPlusSign(APlusSign node)
    {
        defaultIn(node);
    }

    public void outAPlusSign(APlusSign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusSign(APlusSign node)
    {
        inAPlusSign(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusSign(node);
    }

    public void inAMinusSign(AMinusSign node)
    {
        defaultIn(node);
    }

    public void outAMinusSign(AMinusSign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusSign(AMinusSign node)
    {
        inAMinusSign(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusSign(node);
    }

    public void inANextExpression(ANextExpression node)
    {
        defaultIn(node);
    }

    public void outANextExpression(ANextExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextExpression(ANextExpression node)
    {
        inANextExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outANextExpression(node);
    }

    public void inAMultipleExpressions(AMultipleExpressions node)
    {
        defaultIn(node);
    }

    public void outAMultipleExpressions(AMultipleExpressions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleExpressions(AMultipleExpressions node)
    {
        inAMultipleExpressions(node);
        {
            List<PNextExpression> copy = new ArrayList<PNextExpression>(node.getNextExpression());
            Collections.reverse(copy);
            for(PNextExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAMultipleExpressions(node);
    }

    public void inAArraySize(AArraySize node)
    {
        defaultIn(node);
    }

    public void outAArraySize(AArraySize node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArraySize(AArraySize node)
    {
        inAArraySize(node);
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        outAArraySize(node);
    }

    public void inAEmptyBrackets(AEmptyBrackets node)
    {
        defaultIn(node);
    }

    public void outAEmptyBrackets(AEmptyBrackets node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyBrackets(AEmptyBrackets node)
    {
        inAEmptyBrackets(node);
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        outAEmptyBrackets(node);
    }

    public void inAArray(AArray node)
    {
        defaultIn(node);
    }

    public void outAArray(AArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArray(AArray node)
    {
        inAArray(node);
        {
            List<PArrayPosition> copy = new ArrayList<PArrayPosition>(node.getArrayPosition());
            Collections.reverse(copy);
            for(PArrayPosition e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArray(node);
    }

    public void inAArrayPosition(AArrayPosition node)
    {
        defaultIn(node);
    }

    public void outAArrayPosition(AArrayPosition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayPosition(AArrayPosition node)
    {
        inAArrayPosition(node);
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        outAArrayPosition(node);
    }

    public void inAOrLogicOperations(AOrLogicOperations node)
    {
        defaultIn(node);
    }

    public void outAOrLogicOperations(AOrLogicOperations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrLogicOperations(AOrLogicOperations node)
    {
        inAOrLogicOperations(node);
        if(node.getKwOr() != null)
        {
            node.getKwOr().apply(this);
        }
        outAOrLogicOperations(node);
    }

    public void inAAndLogicOperations(AAndLogicOperations node)
    {
        defaultIn(node);
    }

    public void outAAndLogicOperations(AAndLogicOperations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndLogicOperations(AAndLogicOperations node)
    {
        inAAndLogicOperations(node);
        if(node.getKwAnd() != null)
        {
            node.getKwAnd().apply(this);
        }
        outAAndLogicOperations(node);
    }

    public void inANotLogicOperations(ANotLogicOperations node)
    {
        defaultIn(node);
    }

    public void outANotLogicOperations(ANotLogicOperations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotLogicOperations(ANotLogicOperations node)
    {
        inANotLogicOperations(node);
        if(node.getKwNot() != null)
        {
            node.getKwNot().apply(this);
        }
        outANotLogicOperations(node);
    }

    public void inAEqualsComparisonSymbols(AEqualsComparisonSymbols node)
    {
        defaultIn(node);
    }

    public void outAEqualsComparisonSymbols(AEqualsComparisonSymbols node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsComparisonSymbols(AEqualsComparisonSymbols node)
    {
        inAEqualsComparisonSymbols(node);
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        outAEqualsComparisonSymbols(node);
    }

    public void inANotEqualsComparisonSymbols(ANotEqualsComparisonSymbols node)
    {
        defaultIn(node);
    }

    public void outANotEqualsComparisonSymbols(ANotEqualsComparisonSymbols node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualsComparisonSymbols(ANotEqualsComparisonSymbols node)
    {
        inANotEqualsComparisonSymbols(node);
        if(node.getNotEqual() != null)
        {
            node.getNotEqual().apply(this);
        }
        outANotEqualsComparisonSymbols(node);
    }

    public void inALessThanComparisonSymbols(ALessThanComparisonSymbols node)
    {
        defaultIn(node);
    }

    public void outALessThanComparisonSymbols(ALessThanComparisonSymbols node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanComparisonSymbols(ALessThanComparisonSymbols node)
    {
        inALessThanComparisonSymbols(node);
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        outALessThanComparisonSymbols(node);
    }

    public void inAGreaterThanComparisonSymbols(AGreaterThanComparisonSymbols node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanComparisonSymbols(AGreaterThanComparisonSymbols node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanComparisonSymbols(AGreaterThanComparisonSymbols node)
    {
        inAGreaterThanComparisonSymbols(node);
        if(node.getGreaterThan() != null)
        {
            node.getGreaterThan().apply(this);
        }
        outAGreaterThanComparisonSymbols(node);
    }

    public void inAGreaterOrEqualComparisonSymbols(AGreaterOrEqualComparisonSymbols node)
    {
        defaultIn(node);
    }

    public void outAGreaterOrEqualComparisonSymbols(AGreaterOrEqualComparisonSymbols node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterOrEqualComparisonSymbols(AGreaterOrEqualComparisonSymbols node)
    {
        inAGreaterOrEqualComparisonSymbols(node);
        if(node.getGreaterThanEqual() != null)
        {
            node.getGreaterThanEqual().apply(this);
        }
        outAGreaterOrEqualComparisonSymbols(node);
    }

    public void inALessOrEqualComparisonSymbols(ALessOrEqualComparisonSymbols node)
    {
        defaultIn(node);
    }

    public void outALessOrEqualComparisonSymbols(ALessOrEqualComparisonSymbols node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessOrEqualComparisonSymbols(ALessOrEqualComparisonSymbols node)
    {
        inALessOrEqualComparisonSymbols(node);
        if(node.getLessThanEqual() != null)
        {
            node.getLessThanEqual().apply(this);
        }
        outALessOrEqualComparisonSymbols(node);
    }

    public void inAPlusExpNExp(APlusExpNExp node)
    {
        defaultIn(node);
    }

    public void outAPlusExpNExp(APlusExpNExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpNExp(APlusExpNExp node)
    {
        inAPlusExpNExp(node);
        if(node.getNExp2() != null)
        {
            node.getNExp2().apply(this);
        }
        if(node.getNExp1() != null)
        {
            node.getNExp1().apply(this);
        }
        outAPlusExpNExp(node);
    }

    public void inAMinusExpNExp(AMinusExpNExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExpNExp(AMinusExpNExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpNExp(AMinusExpNExp node)
    {
        inAMinusExpNExp(node);
        if(node.getNExp2() != null)
        {
            node.getNExp2().apply(this);
        }
        if(node.getNExp1() != null)
        {
            node.getNExp1().apply(this);
        }
        outAMinusExpNExp(node);
    }

    public void inATermMultNExp(ATermMultNExp node)
    {
        defaultIn(node);
    }

    public void outATermMultNExp(ATermMultNExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermMultNExp(ATermMultNExp node)
    {
        inATermMultNExp(node);
        if(node.getNExp2() != null)
        {
            node.getNExp2().apply(this);
        }
        if(node.getNExp1() != null)
        {
            node.getNExp1().apply(this);
        }
        outATermMultNExp(node);
    }

    public void inATermDivNExp(ATermDivNExp node)
    {
        defaultIn(node);
    }

    public void outATermDivNExp(ATermDivNExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermDivNExp(ATermDivNExp node)
    {
        inATermDivNExp(node);
        if(node.getNExp2() != null)
        {
            node.getNExp2().apply(this);
        }
        if(node.getNExp1() != null)
        {
            node.getNExp1().apply(this);
        }
        outATermDivNExp(node);
    }

    public void inATermModNExp(ATermModNExp node)
    {
        defaultIn(node);
    }

    public void outATermModNExp(ATermModNExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermModNExp(ATermModNExp node)
    {
        inATermModNExp(node);
        if(node.getNExp2() != null)
        {
            node.getNExp2().apply(this);
        }
        if(node.getNExp1() != null)
        {
            node.getNExp1().apply(this);
        }
        outATermModNExp(node);
    }

    public void inAExponentNExp(AExponentNExp node)
    {
        defaultIn(node);
    }

    public void outAExponentNExp(AExponentNExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExponentNExp(AExponentNExp node)
    {
        inAExponentNExp(node);
        if(node.getFinal() != null)
        {
            node.getFinal().apply(this);
        }
        outAExponentNExp(node);
    }

    public void inANonParenFinal(ANonParenFinal node)
    {
        defaultIn(node);
    }

    public void outANonParenFinal(ANonParenFinal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonParenFinal(ANonParenFinal node)
    {
        inANonParenFinal(node);
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        outANonParenFinal(node);
    }

    public void inAParenExpFinal(AParenExpFinal node)
    {
        defaultIn(node);
    }

    public void outAParenExpFinal(AParenExpFinal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenExpFinal(AParenExpFinal node)
    {
        inAParenExpFinal(node);
        if(node.getNExp() != null)
        {
            node.getNExp().apply(this);
        }
        outAParenExpFinal(node);
    }

    public void inAIdenFinal(AIdenFinal node)
    {
        defaultIn(node);
    }

    public void outAIdenFinal(AIdenFinal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdenFinal(AIdenFinal node)
    {
        inAIdenFinal(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdenFinal(node);
    }

    public void inAOrExpCompExp(AOrExpCompExp node)
    {
        defaultIn(node);
    }

    public void outAOrExpCompExp(AOrExpCompExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpCompExp(AOrExpCompExp node)
    {
        inAOrExpCompExp(node);
        if(node.getCompExp2() != null)
        {
            node.getCompExp2().apply(this);
        }
        if(node.getCompExp1() != null)
        {
            node.getCompExp1().apply(this);
        }
        outAOrExpCompExp(node);
    }

    public void inAAndExpCompExp(AAndExpCompExp node)
    {
        defaultIn(node);
    }

    public void outAAndExpCompExp(AAndExpCompExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpCompExp(AAndExpCompExp node)
    {
        inAAndExpCompExp(node);
        if(node.getCompExp2() != null)
        {
            node.getCompExp2().apply(this);
        }
        if(node.getCompExp1() != null)
        {
            node.getCompExp1().apply(this);
        }
        outAAndExpCompExp(node);
    }

    public void inANotExpCompExp(ANotExpCompExp node)
    {
        defaultIn(node);
    }

    public void outANotExpCompExp(ANotExpCompExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpCompExp(ANotExpCompExp node)
    {
        inANotExpCompExp(node);
        if(node.getCompExp() != null)
        {
            node.getCompExp().apply(this);
        }
        outANotExpCompExp(node);
    }

    public void inAPlainExpCompExp(APlainExpCompExp node)
    {
        defaultIn(node);
    }

    public void outAPlainExpCompExp(APlainExpCompExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlainExpCompExp(APlainExpCompExp node)
    {
        inAPlainExpCompExp(node);
        if(node.getCompVal() != null)
        {
            node.getCompVal().apply(this);
        }
        outAPlainExpCompExp(node);
    }

    public void inAEqualsCompVal(AEqualsCompVal node)
    {
        defaultIn(node);
    }

    public void outAEqualsCompVal(AEqualsCompVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsCompVal(AEqualsCompVal node)
    {
        inAEqualsCompVal(node);
        if(node.getCompVal2() != null)
        {
            node.getCompVal2().apply(this);
        }
        if(node.getCompVal1() != null)
        {
            node.getCompVal1().apply(this);
        }
        outAEqualsCompVal(node);
    }

    public void inANotEqualsCompVal(ANotEqualsCompVal node)
    {
        defaultIn(node);
    }

    public void outANotEqualsCompVal(ANotEqualsCompVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualsCompVal(ANotEqualsCompVal node)
    {
        inANotEqualsCompVal(node);
        if(node.getCompVal2() != null)
        {
            node.getCompVal2().apply(this);
        }
        if(node.getCompVal1() != null)
        {
            node.getCompVal1().apply(this);
        }
        outANotEqualsCompVal(node);
    }

    public void inALessThanCompVal(ALessThanCompVal node)
    {
        defaultIn(node);
    }

    public void outALessThanCompVal(ALessThanCompVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanCompVal(ALessThanCompVal node)
    {
        inALessThanCompVal(node);
        if(node.getCompVal2() != null)
        {
            node.getCompVal2().apply(this);
        }
        if(node.getCompVal1() != null)
        {
            node.getCompVal1().apply(this);
        }
        outALessThanCompVal(node);
    }

    public void inAGreaterThanCompVal(AGreaterThanCompVal node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanCompVal(AGreaterThanCompVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanCompVal(AGreaterThanCompVal node)
    {
        inAGreaterThanCompVal(node);
        if(node.getCompVal2() != null)
        {
            node.getCompVal2().apply(this);
        }
        if(node.getCompVal1() != null)
        {
            node.getCompVal1().apply(this);
        }
        outAGreaterThanCompVal(node);
    }

    public void inAGreaterOrEqualCompVal(AGreaterOrEqualCompVal node)
    {
        defaultIn(node);
    }

    public void outAGreaterOrEqualCompVal(AGreaterOrEqualCompVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterOrEqualCompVal(AGreaterOrEqualCompVal node)
    {
        inAGreaterOrEqualCompVal(node);
        if(node.getCompVal2() != null)
        {
            node.getCompVal2().apply(this);
        }
        if(node.getCompVal1() != null)
        {
            node.getCompVal1().apply(this);
        }
        outAGreaterOrEqualCompVal(node);
    }

    public void inALessOrEqualCompVal(ALessOrEqualCompVal node)
    {
        defaultIn(node);
    }

    public void outALessOrEqualCompVal(ALessOrEqualCompVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessOrEqualCompVal(ALessOrEqualCompVal node)
    {
        inALessOrEqualCompVal(node);
        if(node.getCompVal2() != null)
        {
            node.getCompVal2().apply(this);
        }
        if(node.getCompVal1() != null)
        {
            node.getCompVal1().apply(this);
        }
        outALessOrEqualCompVal(node);
    }

    public void inACompFinalCompVal(ACompFinalCompVal node)
    {
        defaultIn(node);
    }

    public void outACompFinalCompVal(ACompFinalCompVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompFinalCompVal(ACompFinalCompVal node)
    {
        inACompFinalCompVal(node);
        if(node.getCompFinal() != null)
        {
            node.getCompFinal().apply(this);
        }
        outACompFinalCompVal(node);
    }

    public void inAExprCompFinal(AExprCompFinal node)
    {
        defaultIn(node);
    }

    public void outAExprCompFinal(AExprCompFinal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprCompFinal(AExprCompFinal node)
    {
        inAExprCompFinal(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExprCompFinal(node);
    }
}
