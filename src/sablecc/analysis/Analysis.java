/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.analysis;

import sablecc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAFunctionDefinition(AFunctionDefinition node);
    void caseAHeader(AHeader node);
    void caseAFparDefinition(AFparDefinition node);
    void caseAIntegerDataType(AIntegerDataType node);
    void caseACharacterDataType(ACharacterDataType node);
    void caseAType(AType node);
    void caseADataTypeRetType(ADataTypeRetType node);
    void caseANothingRetType(ANothingRetType node);
    void caseAFparType(AFparType node);
    void caseAFDefLocalDefinition(AFDefLocalDefinition node);
    void caseAFDeclLocalDefinition(AFDeclLocalDefinition node);
    void caseAVarDefLocalDefinition(AVarDefLocalDefinition node);
    void caseAVarDefinition(AVarDefinition node);
    void caseAFunctionDeclaration(AFunctionDeclaration node);
    void caseASemicolonStatement(ASemicolonStatement node);
    void caseAAssignmentStatement(AAssignmentStatement node);
    void caseABlockStatement(ABlockStatement node);
    void caseAFCallStatement(AFCallStatement node);
    void caseAIfStmtStatement(AIfStmtStatement node);
    void caseAWhileDoStatement(AWhileDoStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseABlock(ABlock node);
    void caseAFuncCall(AFuncCall node);
    void caseAIdentifierLValue(AIdentifierLValue node);
    void caseAStringLitLValue(AStringLitLValue node);
    void caseAArrayAssignLValue(AArrayAssignLValue node);
    void caseAIntConstExpression(AIntConstExpression node);
    void caseACharConstExpression(ACharConstExpression node);
    void caseALValueExpression(ALValueExpression node);
    void caseAFCallExpression(AFCallExpression node);
    void caseAParenExpressionExpression(AParenExpressionExpression node);
    void caseASignedExpressionExpression(ASignedExpressionExpression node);
    void caseANumOperationExpression(ANumOperationExpression node);
    void caseAParenCondCondition(AParenCondCondition node);
    void caseANotConditionCondition(ANotConditionCondition node);
    void caseALogicOperationCondition(ALogicOperationCondition node);
    void caseAComparisonCondition(AComparisonCondition node);
    void caseANextFparDefinition(ANextFparDefinition node);
    void caseANextIdentifier(ANextIdentifier node);
    void caseANextExpression(ANextExpression node);
    void caseAMultipleExpressions(AMultipleExpressions node);
    void caseAArraySize(AArraySize node);
    void caseAEmptyBrackets(AEmptyBrackets node);
    void caseAMatchedIfStmt(AMatchedIfStmt node);
    void caseAUnmatchedIfStmt(AUnmatchedIfStmt node);
    void caseAIfSimpleUnmatched(AIfSimpleUnmatched node);
    void caseAIfMElseUUnmatched(AIfMElseUUnmatched node);
    void caseAIfMElseMMatched(AIfMElseMMatched node);
    void caseAStatementMatched(AStatementMatched node);
    void caseAPlusSign(APlusSign node);
    void caseAMinusSign(AMinusSign node);
    void caseAPlusNumOperations(APlusNumOperations node);
    void caseAMinusNumOperations(AMinusNumOperations node);
    void caseAMultNumOperations(AMultNumOperations node);
    void caseAModNumOperations(AModNumOperations node);
    void caseADivNumOperations(ADivNumOperations node);
    void caseAOrLogicOperations(AOrLogicOperations node);
    void caseAAndLogicOperations(AAndLogicOperations node);
    void caseAEqualsComparisonSymbols(AEqualsComparisonSymbols node);
    void caseANotEqualsComparisonSymbols(ANotEqualsComparisonSymbols node);
    void caseALessThanComparisonSymbols(ALessThanComparisonSymbols node);
    void caseAGreaterThanComparisonSymbols(AGreaterThanComparisonSymbols node);
    void caseAGreaterOrEqualComparisonSymbols(AGreaterOrEqualComparisonSymbols node);
    void caseALessOrEqualComparisonSymbols(ALessOrEqualComparisonSymbols node);

    void caseTFun(TFun node);
    void caseTVar(TVar node);
    void caseTChar(TChar node);
    void caseTInt(TInt node);
    void caseTDo(TDo node);
    void caseTWhile(TWhile node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTThen(TThen node);
    void caseTRef(TRef node);
    void caseTNothing(TNothing node);
    void caseTReturn(TReturn node);
    void caseTLbrace(TLbrace node);
    void caseTRbrace(TRbrace node);
    void caseTLparen(TLparen node);
    void caseTRparen(TRparen node);
    void caseTLbracket(TLbracket node);
    void caseTRbracket(TRbracket node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTColon(TColon node);
    void caseTAssign(TAssign node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDivision(TDivision node);
    void caseTMod(TMod node);
    void caseTDiv(TDiv node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNotEqual(TNotEqual node);
    void caseTEquals(TEquals node);
    void caseTLessThan(TLessThan node);
    void caseTLessThanEqual(TLessThanEqual node);
    void caseTGreaterThan(TGreaterThan node);
    void caseTGreaterThanEqual(TGreaterThanEqual node);
    void caseTNot(TNot node);
    void caseTIdentifier(TIdentifier node);
    void caseTIntConst(TIntConst node);
    void caseTCharConst(TCharConst node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTWhitespace(TWhitespace node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
