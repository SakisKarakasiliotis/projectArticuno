/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.parser;

import sablecc.lexer.*;
import sablecc.node.*;
import sablecc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAfunctiondefinitionfunctiondefinition1FunctionDefinition */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AAfunctiondefinitionfunctiondefinition2FunctionDefinition */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AAheaderheader1Header */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AAheaderheader2Header */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AAheaderheader3Header */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AAheaderheader4Header */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce AFDefLocalDefinition */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AFDeclLocalDefinition */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AVarDefLocalDefinition */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce AAblockblock1Block */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AAblockblock2Block */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce AAfpardefinitionfpardefinition1FparDefinition */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce AAfpardefinitionfpardefinition2FparDefinition */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce AAfpardefinitionfpardefinition3FparDefinition */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce AAfpardefinitionfpardefinition4FparDefinition */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce ANextFparDefinitionNextFparDefinition */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce ADataTypeRetType */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce ANothingRetType */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce AIntegerDataType */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list);
            }
            break;
            case 20: /* reduce ACharacterDataType */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce AAtypetype1Type */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list);
            }
            break;
            case 22: /* reduce AAtypetype2Type */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list);
            }
            break;
            case 23: /* reduce AFunctionDeclarationHeaderFunctionDeclaration */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list);
            }
            break;
            case 24: /* reduce AAfpartypefpartype1FparType */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list);
            }
            break;
            case 25: /* reduce AAfpartypefpartype2FparType */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list);
            }
            break;
            case 26: /* reduce AAfpartypefpartype3FparType */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list);
            }
            break;
            case 27: /* reduce AAfpartypefpartype4FparType */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list);
            }
            break;
            case 28: /* reduce AAvardefinitionvardefinition1VarDefinition */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list);
            }
            break;
            case 29: /* reduce AAvardefinitionvardefinition2VarDefinition */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list);
            }
            break;
            case 30: /* reduce ANextIdentifierNextIdentifier */
            {
                ArrayList<Object> list = new30();
                push(goTo(13), list);
            }
            break;
            case 31: /* reduce ANoopStatement */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list);
            }
            break;
            case 32: /* reduce AAssignmentStatement */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list);
            }
            break;
            case 33: /* reduce AIfStatement */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list);
            }
            break;
            case 34: /* reduce ABlockStatement */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list);
            }
            break;
            case 35: /* reduce AFCallStatement */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list);
            }
            break;
            case 36: /* reduce AWhileDoStatement */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list);
            }
            break;
            case 37: /* reduce AAreturnstatement1Statement */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list);
            }
            break;
            case 38: /* reduce AAreturnstatement2Statement */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list);
            }
            break;
            case 39: /* reduce ANoElseIfStmt */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list);
            }
            break;
            case 40: /* reduce AWithElseIfStmt */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list);
            }
            break;
            case 41: /* reduce ANoopStmtWithElse */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list);
            }
            break;
            case 42: /* reduce AAssignmentStmtWithElse */
            {
                ArrayList<Object> list = new42();
                push(goTo(16), list);
            }
            break;
            case 43: /* reduce AIfStmtWithElse */
            {
                ArrayList<Object> list = new43();
                push(goTo(16), list);
            }
            break;
            case 44: /* reduce ABlockStmtWithElse */
            {
                ArrayList<Object> list = new44();
                push(goTo(16), list);
            }
            break;
            case 45: /* reduce AFCallStmtWithElse */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list);
            }
            break;
            case 46: /* reduce AWhileDoStmtWithElse */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list);
            }
            break;
            case 47: /* reduce AAreturnstmtwithelse1StmtWithElse */
            {
                ArrayList<Object> list = new47();
                push(goTo(16), list);
            }
            break;
            case 48: /* reduce AAreturnstmtwithelse2StmtWithElse */
            {
                ArrayList<Object> list = new48();
                push(goTo(16), list);
            }
            break;
            case 49: /* reduce AStatementWithElseIfElseStmt */
            {
                ArrayList<Object> list = new49();
                push(goTo(17), list);
            }
            break;
            case 50: /* reduce AAfunccallfunccall1FuncCall */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list);
            }
            break;
            case 51: /* reduce AAfunccallfunccall2FuncCall */
            {
                ArrayList<Object> list = new51();
                push(goTo(18), list);
            }
            break;
            case 52: /* reduce AAmultipleexpressions1MultipleExpressions */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list);
            }
            break;
            case 53: /* reduce AAmultipleexpressions2MultipleExpressions */
            {
                ArrayList<Object> list = new53();
                push(goTo(19), list);
            }
            break;
            case 54: /* reduce ANextExpression */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list);
            }
            break;
            case 55: /* reduce AIdentifierLValue */
            {
                ArrayList<Object> list = new55();
                push(goTo(21), list);
            }
            break;
            case 56: /* reduce AStringLitLValue */
            {
                ArrayList<Object> list = new56();
                push(goTo(21), list);
            }
            break;
            case 57: /* reduce AAarrayassignlvalue1LValue */
            {
                ArrayList<Object> list = new57();
                push(goTo(21), list);
            }
            break;
            case 58: /* reduce AAarrayassignlvalue2LValue */
            {
                ArrayList<Object> list = new58();
                push(goTo(21), list);
            }
            break;
            case 59: /* reduce AArrayExpression */
            {
                ArrayList<Object> list = new59();
                push(goTo(22), list);
            }
            break;
            case 60: /* reduce AStringExpression */
            {
                ArrayList<Object> list = new60();
                push(goTo(22), list);
            }
            break;
            case 61: /* reduce ACharConstExpression */
            {
                ArrayList<Object> list = new61();
                push(goTo(22), list);
            }
            break;
            case 62: /* reduce AFCallExpression */
            {
                ArrayList<Object> list = new62();
                push(goTo(22), list);
            }
            break;
            case 63: /* reduce AParenExpressionExpression */
            {
                ArrayList<Object> list = new63();
                push(goTo(22), list);
            }
            break;
            case 64: /* reduce ASignedExpressionExpression */
            {
                ArrayList<Object> list = new64();
                push(goTo(22), list);
            }
            break;
            case 65: /* reduce ANumOperExpression */
            {
                ArrayList<Object> list = new65();
                push(goTo(22), list);
            }
            break;
            case 66: /* reduce AArrayExpressionB */
            {
                ArrayList<Object> list = new66();
                push(goTo(23), list);
            }
            break;
            case 67: /* reduce AStringExpressionB */
            {
                ArrayList<Object> list = new67();
                push(goTo(23), list);
            }
            break;
            case 68: /* reduce ACharConstExpressionB */
            {
                ArrayList<Object> list = new68();
                push(goTo(23), list);
            }
            break;
            case 69: /* reduce AFCallExpressionB */
            {
                ArrayList<Object> list = new69();
                push(goTo(23), list);
            }
            break;
            case 70: /* reduce ASignedExpressionExpressionB */
            {
                ArrayList<Object> list = new70();
                push(goTo(23), list);
            }
            break;
            case 71: /* reduce ACondExpCondition */
            {
                ArrayList<Object> list = new71();
                push(goTo(24), list);
            }
            break;
            case 72: /* reduce APlusSign */
            {
                ArrayList<Object> list = new72();
                push(goTo(25), list);
            }
            break;
            case 73: /* reduce AMinusSign */
            {
                ArrayList<Object> list = new73();
                push(goTo(25), list);
            }
            break;
            case 74: /* reduce AArraySize */
            {
                ArrayList<Object> list = new74();
                push(goTo(26), list);
            }
            break;
            case 75: /* reduce AEmptyBrackets */
            {
                ArrayList<Object> list = new75();
                push(goTo(27), list);
            }
            break;
            case 76: /* reduce AArray */
            {
                ArrayList<Object> list = new76();
                push(goTo(28), list);
            }
            break;
            case 77: /* reduce AArrayPosition */
            {
                ArrayList<Object> list = new77();
                push(goTo(29), list);
            }
            break;
            case 78: /* reduce AOrLogicOperations */
            {
                ArrayList<Object> list = new78();
                push(goTo(30), list);
            }
            break;
            case 79: /* reduce AAndLogicOperations */
            {
                ArrayList<Object> list = new79();
                push(goTo(30), list);
            }
            break;
            case 80: /* reduce ANotLogicOperations */
            {
                ArrayList<Object> list = new80();
                push(goTo(30), list);
            }
            break;
            case 81: /* reduce AEqualsComparisonSymbols */
            {
                ArrayList<Object> list = new81();
                push(goTo(31), list);
            }
            break;
            case 82: /* reduce ANotEqualComparisonSymbols */
            {
                ArrayList<Object> list = new82();
                push(goTo(31), list);
            }
            break;
            case 83: /* reduce ALessThanComparisonSymbols */
            {
                ArrayList<Object> list = new83();
                push(goTo(31), list);
            }
            break;
            case 84: /* reduce AGreaterThanComparisonSymbols */
            {
                ArrayList<Object> list = new84();
                push(goTo(31), list);
            }
            break;
            case 85: /* reduce AGreaterOrEqualComparisonSymbols */
            {
                ArrayList<Object> list = new85();
                push(goTo(31), list);
            }
            break;
            case 86: /* reduce ALessOrEqualComparisonSymbols */
            {
                ArrayList<Object> list = new86();
                push(goTo(31), list);
            }
            break;
            case 87: /* reduce APlusExpNExp */
            {
                ArrayList<Object> list = new87();
                push(goTo(32), list);
            }
            break;
            case 88: /* reduce AMinusExpNExp */
            {
                ArrayList<Object> list = new88();
                push(goTo(32), list);
            }
            break;
            case 89: /* reduce ATermNExp */
            {
                ArrayList<Object> list = new89();
                push(goTo(32), list);
            }
            break;
            case 90: /* reduce ATermMultTerm */
            {
                ArrayList<Object> list = new90();
                push(goTo(33), list);
            }
            break;
            case 91: /* reduce ATermDivTerm */
            {
                ArrayList<Object> list = new91();
                push(goTo(33), list);
            }
            break;
            case 92: /* reduce ATermModTerm */
            {
                ArrayList<Object> list = new92();
                push(goTo(33), list);
            }
            break;
            case 93: /* reduce AExponentTerm */
            {
                ArrayList<Object> list = new93();
                push(goTo(33), list);
            }
            break;
            case 94: /* reduce AUnsignedExponent */
            {
                ArrayList<Object> list = new94();
                push(goTo(34), list);
            }
            break;
            case 95: /* reduce ANonParenFinal */
            {
                ArrayList<Object> list = new95();
                push(goTo(35), list);
            }
            break;
            case 96: /* reduce AParenExpFinal */
            {
                ArrayList<Object> list = new96();
                push(goTo(35), list);
            }
            break;
            case 97: /* reduce AIdenFinal */
            {
                ArrayList<Object> list = new97();
                push(goTo(35), list);
            }
            break;
            case 98: /* reduce AOrExpCompExp */
            {
                ArrayList<Object> list = new98();
                push(goTo(36), list);
            }
            break;
            case 99: /* reduce ANoOrExpCompExp */
            {
                ArrayList<Object> list = new99();
                push(goTo(36), list);
            }
            break;
            case 100: /* reduce AAndExprCompTerm */
            {
                ArrayList<Object> list = new100();
                push(goTo(37), list);
            }
            break;
            case 101: /* reduce ANoAndExpCompTerm */
            {
                ArrayList<Object> list = new101();
                push(goTo(37), list);
            }
            break;
            case 102: /* reduce ANotExpCompFun */
            {
                ArrayList<Object> list = new102();
                push(goTo(38), list);
            }
            break;
            case 103: /* reduce APlainExpCompFun */
            {
                ArrayList<Object> list = new103();
                push(goTo(38), list);
            }
            break;
            case 104: /* reduce AEqualsCompVal */
            {
                ArrayList<Object> list = new104();
                push(goTo(39), list);
            }
            break;
            case 105: /* reduce ANotEqualsCompVal */
            {
                ArrayList<Object> list = new105();
                push(goTo(39), list);
            }
            break;
            case 106: /* reduce ALessThanCompVal */
            {
                ArrayList<Object> list = new106();
                push(goTo(39), list);
            }
            break;
            case 107: /* reduce AGreaterThanCompVal */
            {
                ArrayList<Object> list = new107();
                push(goTo(39), list);
            }
            break;
            case 108: /* reduce AGreaterOrEqualCompVal */
            {
                ArrayList<Object> list = new108();
                push(goTo(39), list);
            }
            break;
            case 109: /* reduce ALessOrEqualCompVal */
            {
                ArrayList<Object> list = new109();
                push(goTo(39), list);
            }
            break;
            case 110: /* reduce ACompFinalCompVal */
            {
                ArrayList<Object> list = new110();
                push(goTo(39), list);
            }
            break;
            case 111: /* reduce AExprCompFinal */
            {
                ArrayList<Object> list = new111();
                push(goTo(40), list);
            }
            break;
            case 112: /* reduce ATerminal$LocalDefinition */
            {
                ArrayList<Object> list = new112();
                push(goTo(41), list);
            }
            break;
            case 113: /* reduce ANonTerminal$LocalDefinition */
            {
                ArrayList<Object> list = new113();
                push(goTo(41), list);
            }
            break;
            case 114: /* reduce ATerminal$NextFparDefinition */
            {
                ArrayList<Object> list = new114();
                push(goTo(42), list);
            }
            break;
            case 115: /* reduce ANonTerminal$NextFparDefinition */
            {
                ArrayList<Object> list = new115();
                push(goTo(42), list);
            }
            break;
            case 116: /* reduce ATerminal$Statement */
            {
                ArrayList<Object> list = new116();
                push(goTo(43), list);
            }
            break;
            case 117: /* reduce ANonTerminal$Statement */
            {
                ArrayList<Object> list = new117();
                push(goTo(43), list);
            }
            break;
            case 118: /* reduce ATerminal$NextIdentifier */
            {
                ArrayList<Object> list = new118();
                push(goTo(44), list);
            }
            break;
            case 119: /* reduce ANonTerminal$NextIdentifier */
            {
                ArrayList<Object> list = new119();
                push(goTo(44), list);
            }
            break;
            case 120: /* reduce ATerminal$ArraySize */
            {
                ArrayList<Object> list = new120();
                push(goTo(45), list);
            }
            break;
            case 121: /* reduce ANonTerminal$ArraySize */
            {
                ArrayList<Object> list = new121();
                push(goTo(45), list);
            }
            break;
            case 122: /* reduce ATerminal$NextExpression */
            {
                ArrayList<Object> list = new122();
                push(goTo(46), list);
            }
            break;
            case 123: /* reduce ANonTerminal$NextExpression */
            {
                ArrayList<Object> list = new123();
                push(goTo(46), list);
            }
            break;
            case 124: /* reduce ATerminal$ArrayPosition */
            {
                ArrayList<Object> list = new124();
                push(goTo(47), list);
            }
            break;
            case 125: /* reduce ANonTerminal$ArrayPosition */
            {
                ArrayList<Object> list = new125();
                push(goTo(47), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFunctionDefinition pfunctiondefinitionNode2;
        pfunctiondefinitionNode2 = (PFunctionDefinition)nodeArrayList1.get(0);

        pprogramNode1 = new AProgramProgram(pfunctiondefinitionNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAfunctiondefinitionfunctiondefinition1FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PBlock pblockNode4;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        }
        pblockNode4 = (PBlock)nodeArrayList2.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinitionFunctionDefinition(pheaderNode2, listNode3, pblockNode4);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAfunctiondefinitionfunctiondefinition2FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PBlock pblockNode5;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pblockNode5 = (PBlock)nodeArrayList3.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinitionFunctionDefinition(pheaderNode2, listNode4, pblockNode5);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAheaderheader1Header */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PRetType prettypeNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        prettypeNode5 = (PRetType)nodeArrayList6.get(0);

        pheaderNode1 = new AHeaderHeader(tidentifierNode2, null, listNode4, prettypeNode5);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAheaderheader2Header */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PFparDefinition pfpardefinitionNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PRetType prettypeNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pfpardefinitionNode3 = (PFparDefinition)nodeArrayList4.get(0);
        {
            // Block
        }
        prettypeNode5 = (PRetType)nodeArrayList7.get(0);

        pheaderNode1 = new AHeaderHeader(tidentifierNode2, pfpardefinitionNode3, listNode4, prettypeNode5);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAheaderheader3Header */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PRetType prettypeNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        prettypeNode6 = (PRetType)nodeArrayList7.get(0);

        pheaderNode1 = new AHeaderHeader(tidentifierNode2, null, listNode5, prettypeNode6);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAheaderheader4Header */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PFparDefinition pfpardefinitionNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PRetType prettypeNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pfpardefinitionNode3 = (PFparDefinition)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        prettypeNode6 = (PRetType)nodeArrayList8.get(0);

        pheaderNode1 = new AHeaderHeader(tidentifierNode2, pfpardefinitionNode3, listNode5, prettypeNode6);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AFDefLocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDefinition plocaldefinitionNode1;
        {
            // Block
        PFunctionDefinition pfunctiondefinitionNode2;
        pfunctiondefinitionNode2 = (PFunctionDefinition)nodeArrayList1.get(0);

        plocaldefinitionNode1 = new AFDefLocalDefinition(pfunctiondefinitionNode2);
        }
	nodeList.add(plocaldefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AFDeclLocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDefinition plocaldefinitionNode1;
        {
            // Block
        PHeader pheaderNode2;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);

        plocaldefinitionNode1 = new AFDeclLocalDefinition(pheaderNode2);
        }
	nodeList.add(plocaldefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVarDefLocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDefinition plocaldefinitionNode1;
        {
            // Block
        PVarDefinition pvardefinitionNode2;
        pvardefinitionNode2 = (PVarDefinition)nodeArrayList1.get(0);

        plocaldefinitionNode1 = new AVarDefLocalDefinition(pvardefinitionNode2);
        }
	nodeList.add(plocaldefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAblockblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pblockNode1 = new ABlockBlock(listNode2);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAblockblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pblockNode1 = new ABlockBlock(listNode3);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAfpardefinitionfpardefinition1FparDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDefinition pfpardefinitionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PFparType pfpartypeNode5;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        pfpartypeNode5 = (PFparType)nodeArrayList3.get(0);

        pfpardefinitionNode1 = new AFparDefinitionFparDefinition(null, tidentifierNode3, listNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAfpardefinitionfpardefinition2FparDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDefinition pfpardefinitionNode1;
        {
            // Block
        TKwRef tkwrefNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PFparType pfpartypeNode5;
        tkwrefNode2 = (TKwRef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        pfpartypeNode5 = (PFparType)nodeArrayList4.get(0);

        pfpardefinitionNode1 = new AFparDefinitionFparDefinition(tkwrefNode2, tidentifierNode3, listNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAfpardefinitionfpardefinition3FparDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDefinition pfpardefinitionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PFparType pfpartypeNode6;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pfpartypeNode6 = (PFparType)nodeArrayList4.get(0);

        pfpardefinitionNode1 = new AFparDefinitionFparDefinition(null, tidentifierNode3, listNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAfpardefinitionfpardefinition4FparDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDefinition pfpardefinitionNode1;
        {
            // Block
        TKwRef tkwrefNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PFparType pfpartypeNode6;
        tkwrefNode2 = (TKwRef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pfpartypeNode6 = (PFparType)nodeArrayList5.get(0);

        pfpardefinitionNode1 = new AFparDefinitionFparDefinition(tkwrefNode2, tidentifierNode3, listNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ANextFparDefinitionNextFparDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNextFparDefinition pnextfpardefinitionNode1;
        {
            // Block
        PFparDefinition pfpardefinitionNode2;
        pfpardefinitionNode2 = (PFparDefinition)nodeArrayList2.get(0);

        pnextfpardefinitionNode1 = new ANextFparDefinitionNextFparDefinition(pfpardefinitionNode2);
        }
	nodeList.add(pnextfpardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ADataTypeRetType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);

        prettypeNode1 = new ADataTypeRetType(pdatatypeNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ANothingRetType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        TKwNothing tkwnothingNode2;
        tkwnothingNode2 = (TKwNothing)nodeArrayList1.get(0);

        prettypeNode1 = new ANothingRetType(tkwnothingNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AIntegerDataType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TKwInt tkwintNode2;
        tkwintNode2 = (TKwInt)nodeArrayList1.get(0);

        pdatatypeNode1 = new AIntegerDataType(tkwintNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ACharacterDataType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TKwChar tkwcharNode2;
        tkwcharNode2 = (TKwChar)nodeArrayList1.get(0);

        pdatatypeNode1 = new ACharacterDataType(tkwcharNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAtypetype1Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        }

        ptypeNode1 = new ATypeType(pdatatypeNode2, listNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAtypetype2Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypeNode1 = new ATypeType(pdatatypeNode2, listNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AFunctionDeclarationHeaderFunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHeader pheaderNode1;
        pheaderNode1 = (PHeader)nodeArrayList1.get(0);
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAfpartypefpartype1FparType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new AFparTypeFparType(pdatatypeNode2, null, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAfpartypefpartype2FparType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PEmptyBrackets pemptybracketsNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        pemptybracketsNode3 = (PEmptyBrackets)nodeArrayList2.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new AFparTypeFparType(pdatatypeNode2, pemptybracketsNode3, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAfpartypefpartype3FparType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new AFparTypeFparType(pdatatypeNode2, null, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAfpartypefpartype4FparType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PEmptyBrackets pemptybracketsNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        pemptybracketsNode3 = (PEmptyBrackets)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new AFparTypeFparType(pdatatypeNode2, pemptybracketsNode3, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAvardefinitionvardefinition1VarDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDefinition pvardefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PType ptypeNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        ptypeNode4 = (PType)nodeArrayList4.get(0);

        pvardefinitionNode1 = new AVarDefinitionVarDefinition(tidentifierNode2, listNode3, ptypeNode4);
        }
	nodeList.add(pvardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAvardefinitionvardefinition2VarDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDefinition pvardefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PType ptypeNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList5.get(0);

        pvardefinitionNode1 = new AVarDefinitionVarDefinition(tidentifierNode2, listNode4, ptypeNode5);
        }
	nodeList.add(pvardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ANextIdentifierNextIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNextIdentifier pnextidentifierNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);

        pnextidentifierNode1 = new ANextIdentifierNextIdentifier(tidentifierNode2);
        }
	nodeList.add(pnextidentifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ANoopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pstatementNode1 = new ANoopStatement(tsemicolonNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAssignmentStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PLValue plvalueNode2;
        PExpression pexpressionNode3;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignmentStatement(plvalueNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ABlockStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstatementNode1 = new ABlockStatement(pblockNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AFCallStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFCallStatement(pfunccallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AWhileDoStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCondition pconditionNode2;
        PStatement pstatementNode3;
        pconditionNode2 = (PCondition)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileDoStatement(pconditionNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAreturnstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pstatementNode1 = new AReturnStatement(null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAreturnstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ANoElseIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCondition pconditionNode2;
        PStatement pstatementNode3;
        pconditionNode2 = (PCondition)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new ANoElseStatement(pconditionNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AWithElseIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCondition pconditionNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pconditionNode2 = (PCondition)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);
        pstatementNode4 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AWithElseStatement(pconditionNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ANoopStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pstatementNode1 = new ANoopStatement(tsemicolonNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAssignmentStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PLValue plvalueNode2;
        PExpression pexpressionNode3;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignmentStatement(plvalueNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AIfStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ABlockStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstatementNode1 = new ABlockStatement(pblockNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AFCallStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFCallStatement(pfunccallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AWhileDoStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCondition pconditionNode2;
        PStatement pstatementNode3;
        pconditionNode2 = (PCondition)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileDoStatement(pconditionNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAreturnstmtwithelse1StmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pstatementNode1 = new AReturnStatement(null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAreturnstmtwithelse2StmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AStatementWithElseIfElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCondition pconditionNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pconditionNode2 = (PCondition)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);
        pstatementNode4 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AStatementWithElseStatement(pconditionNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAfunccallfunccall1FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pfunccallNode1 = new AFuncCallFuncCall(tidentifierNode2, listNode3);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAfunccallfunccall2FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfunccallNode1 = new AFuncCallFuncCall(tidentifierNode2, listNode4);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAmultipleexpressions1MultipleExpressions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAmultipleexpressions2MultipleExpressions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode3.add(pexpressionNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ANextExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AIdentifierLValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        plvalueNode1 = new AIdentifierLValue(tidentifierNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AStringLitLValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        plvalueNode1 = new AStringLitLValue(tstringliteralNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAarrayassignlvalue1LValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        PLValue plvalueNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);

        plvalueNode1 = new AArrayAssignLValue(plvalueNode2, null);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAarrayassignlvalue2LValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        PLValue plvalueNode2;
        PExpression pexpressionNode3;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        plvalueNode1 = new AArrayAssignLValue(plvalueNode2, pexpressionNode3);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AArrayExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PArray parrayNode2;
        parrayNode2 = (PArray)nodeArrayList1.get(0);

        pexpressionNode1 = new AArrayExpression(parrayNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AStringExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pexpressionNode1 = new AStringExpression(tstringliteralNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ACharConstExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TCharConst tcharconstNode2;
        tcharconstNode2 = (TCharConst)nodeArrayList1.get(0);

        pexpressionNode1 = new ACharConstExpression(tcharconstNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AFCallExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pexpressionNode1 = new AFCallExpression(pfunccallNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AParenExpressionExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new AParenExpressionExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ASignedExpressionExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PSign psignNode2;
        PExpression pexpressionNode3;
        psignNode2 = (PSign)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ASignedExpressionExpression(psignNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ANumOperExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PNExp pnexpNode2;
        pnexpNode2 = (PNExp)nodeArrayList1.get(0);

        pexpressionNode1 = new ANumOperExpression(pnexpNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AArrayExpressionB */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PArray parrayNode2;
        parrayNode2 = (PArray)nodeArrayList1.get(0);

        pexpressionNode1 = new AArrayExpression(parrayNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AStringExpressionB */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pexpressionNode1 = new AStringExpression(tstringliteralNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ACharConstExpressionB */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TCharConst tcharconstNode2;
        tcharconstNode2 = (TCharConst)nodeArrayList1.get(0);

        pexpressionNode1 = new ACharConstExpression(tcharconstNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AFCallExpressionB */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pexpressionNode1 = new AFCallExpression(pfunccallNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ASignedExpressionExpressionB */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PSign psignNode2;
        PExpression pexpressionNode3;
        psignNode2 = (PSign)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ASignedExpressionExpression(psignNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ACondExpCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PCompExp pcompexpNode2;
        pcompexpNode2 = (PCompExp)nodeArrayList1.get(0);

        pconditionNode1 = new ACondExpCondition(pcompexpNode2);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce APlusSign */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSign psignNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        psignNode1 = new APlusSign(tplusNode2);
        }
	nodeList.add(psignNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AMinusSign */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSign psignNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        psignNode1 = new AMinusSign(tminusNode2);
        }
	nodeList.add(psignNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AArraySize */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArraySize parraysizeNode1;
        {
            // Block
        TIntConst tintconstNode2;
        tintconstNode2 = (TIntConst)nodeArrayList2.get(0);

        parraysizeNode1 = new AArraySizeArraySize(tintconstNode2);
        }
	nodeList.add(parraysizeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AEmptyBrackets */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEmptyBrackets pemptybracketsNode1;
        {
            // Block
        TLbracket tlbracketNode2;
        TRbracket trbracketNode3;
        tlbracketNode2 = (TLbracket)nodeArrayList1.get(0);
        trbracketNode3 = (TRbracket)nodeArrayList2.get(0);

        pemptybracketsNode1 = new AEmptyBrackets(tlbracketNode2, trbracketNode3);
        }
	nodeList.add(pemptybracketsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArray parrayNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        parrayNode1 = new AArrayArray(tidentifierNode2, listNode4);
        }
	nodeList.add(parrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AArrayPosition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AOrLogicOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAndLogicOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ANotLogicOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AEqualsComparisonSymbols */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ANotEqualComparisonSymbols */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ALessThanComparisonSymbols */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AGreaterThanComparisonSymbols */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AGreaterOrEqualComparisonSymbols */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ALessOrEqualComparisonSymbols */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce APlusExpNExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNExp pnexpNode1;
        {
            // Block
        PNExp pnexpNode2;
        PNExp pnexpNode3;
        pnexpNode2 = (PNExp)nodeArrayList1.get(0);
        pnexpNode3 = (PNExp)nodeArrayList3.get(0);

        pnexpNode1 = new APlusExpNExp(pnexpNode2, pnexpNode3);
        }
	nodeList.add(pnexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AMinusExpNExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNExp pnexpNode1;
        {
            // Block
        PNExp pnexpNode2;
        PNExp pnexpNode3;
        pnexpNode2 = (PNExp)nodeArrayList1.get(0);
        pnexpNode3 = (PNExp)nodeArrayList3.get(0);

        pnexpNode1 = new AMinusExpNExp(pnexpNode2, pnexpNode3);
        }
	nodeList.add(pnexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ATermNExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNExp pnexpNode1;
        pnexpNode1 = (PNExp)nodeArrayList1.get(0);
	nodeList.add(pnexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ATermMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNExp pnexpNode1;
        {
            // Block
        PNExp pnexpNode2;
        PNExp pnexpNode3;
        pnexpNode2 = (PNExp)nodeArrayList1.get(0);
        pnexpNode3 = (PNExp)nodeArrayList3.get(0);

        pnexpNode1 = new ATermMultNExp(pnexpNode2, pnexpNode3);
        }
	nodeList.add(pnexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ATermDivTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNExp pnexpNode1;
        {
            // Block
        PNExp pnexpNode2;
        PNExp pnexpNode3;
        pnexpNode2 = (PNExp)nodeArrayList1.get(0);
        pnexpNode3 = (PNExp)nodeArrayList3.get(0);

        pnexpNode1 = new ATermDivNExp(pnexpNode2, pnexpNode3);
        }
	nodeList.add(pnexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ATermModTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNExp pnexpNode1;
        {
            // Block
        PNExp pnexpNode2;
        PNExp pnexpNode3;
        pnexpNode2 = (PNExp)nodeArrayList1.get(0);
        pnexpNode3 = (PNExp)nodeArrayList3.get(0);

        pnexpNode1 = new ATermModNExp(pnexpNode2, pnexpNode3);
        }
	nodeList.add(pnexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce AExponentTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNExp pnexpNode1;
        pnexpNode1 = (PNExp)nodeArrayList1.get(0);
	nodeList.add(pnexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce AUnsignedExponent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNExp pnexpNode1;
        {
            // Block
        PFinal pfinalNode2;
        pfinalNode2 = (PFinal)nodeArrayList1.get(0);

        pnexpNode1 = new AExponentNExp(pfinalNode2);
        }
	nodeList.add(pnexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ANonParenFinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFinal pfinalNode1;
        {
            // Block
        TIntConst tintconstNode2;
        tintconstNode2 = (TIntConst)nodeArrayList1.get(0);

        pfinalNode1 = new ANonParenFinal(tintconstNode2);
        }
	nodeList.add(pfinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AParenExpFinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFinal pfinalNode1;
        {
            // Block
        PNExp pnexpNode2;
        pnexpNode2 = (PNExp)nodeArrayList2.get(0);

        pfinalNode1 = new AParenExpFinal(pnexpNode2);
        }
	nodeList.add(pfinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AIdenFinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFinal pfinalNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pfinalNode1 = new AIdenFinal(tidentifierNode2);
        }
	nodeList.add(pfinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce AOrExpCompExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompExp pcompexpNode1;
        {
            // Block
        PCompExp pcompexpNode2;
        PCompExp pcompexpNode3;
        pcompexpNode2 = (PCompExp)nodeArrayList1.get(0);
        pcompexpNode3 = (PCompExp)nodeArrayList3.get(0);

        pcompexpNode1 = new AOrExpCompExp(pcompexpNode2, pcompexpNode3);
        }
	nodeList.add(pcompexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ANoOrExpCompExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompExp pcompexpNode1;
        pcompexpNode1 = (PCompExp)nodeArrayList1.get(0);
	nodeList.add(pcompexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce AAndExprCompTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompExp pcompexpNode1;
        {
            // Block
        PCompExp pcompexpNode2;
        PCompExp pcompexpNode3;
        pcompexpNode2 = (PCompExp)nodeArrayList1.get(0);
        pcompexpNode3 = (PCompExp)nodeArrayList3.get(0);

        pcompexpNode1 = new AAndExpCompExp(pcompexpNode2, pcompexpNode3);
        }
	nodeList.add(pcompexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ANoAndExpCompTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompExp pcompexpNode1;
        pcompexpNode1 = (PCompExp)nodeArrayList1.get(0);
	nodeList.add(pcompexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ANotExpCompFun */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompExp pcompexpNode1;
        pcompexpNode1 = (PCompExp)nodeArrayList2.get(0);
	nodeList.add(pcompexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce APlainExpCompFun */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompExp pcompexpNode1;
        {
            // Block
        PCompVal pcompvalNode2;
        pcompvalNode2 = (PCompVal)nodeArrayList1.get(0);

        pcompexpNode1 = new APlainExpCompExp(pcompvalNode2);
        }
	nodeList.add(pcompexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce AEqualsCompVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompVal pcompvalNode1;
        {
            // Block
        PCompVal pcompvalNode2;
        PCompFinal pcompfinalNode3;
        pcompvalNode2 = (PCompVal)nodeArrayList1.get(0);
        pcompfinalNode3 = (PCompFinal)nodeArrayList3.get(0);

        pcompvalNode1 = new AEqualsCompVal(pcompvalNode2, pcompfinalNode3);
        }
	nodeList.add(pcompvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ANotEqualsCompVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompVal pcompvalNode1;
        {
            // Block
        PCompVal pcompvalNode2;
        PCompFinal pcompfinalNode3;
        pcompvalNode2 = (PCompVal)nodeArrayList1.get(0);
        pcompfinalNode3 = (PCompFinal)nodeArrayList3.get(0);

        pcompvalNode1 = new ANotEqualsCompVal(pcompvalNode2, pcompfinalNode3);
        }
	nodeList.add(pcompvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce ALessThanCompVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompVal pcompvalNode1;
        {
            // Block
        PCompVal pcompvalNode2;
        PCompFinal pcompfinalNode3;
        pcompvalNode2 = (PCompVal)nodeArrayList1.get(0);
        pcompfinalNode3 = (PCompFinal)nodeArrayList3.get(0);

        pcompvalNode1 = new ALessThanCompVal(pcompvalNode2, pcompfinalNode3);
        }
	nodeList.add(pcompvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce AGreaterThanCompVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompVal pcompvalNode1;
        {
            // Block
        PCompVal pcompvalNode2;
        PCompFinal pcompfinalNode3;
        pcompvalNode2 = (PCompVal)nodeArrayList1.get(0);
        pcompfinalNode3 = (PCompFinal)nodeArrayList3.get(0);

        pcompvalNode1 = new AGreaterThanCompVal(pcompvalNode2, pcompfinalNode3);
        }
	nodeList.add(pcompvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce AGreaterOrEqualCompVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompVal pcompvalNode1;
        {
            // Block
        PCompVal pcompvalNode2;
        PCompFinal pcompfinalNode3;
        pcompvalNode2 = (PCompVal)nodeArrayList1.get(0);
        pcompfinalNode3 = (PCompFinal)nodeArrayList3.get(0);

        pcompvalNode1 = new AGreaterOrEqualCompVal(pcompvalNode2, pcompfinalNode3);
        }
	nodeList.add(pcompvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ALessOrEqualCompVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompVal pcompvalNode1;
        {
            // Block
        PCompVal pcompvalNode2;
        PCompFinal pcompfinalNode3;
        pcompvalNode2 = (PCompVal)nodeArrayList1.get(0);
        pcompfinalNode3 = (PCompFinal)nodeArrayList3.get(0);

        pcompvalNode1 = new ALessOrEqualCompVal(pcompvalNode2, pcompfinalNode3);
        }
	nodeList.add(pcompvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce ACompFinalCompVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompVal pcompvalNode1;
        {
            // Block
        PCompFinal pcompfinalNode2;
        pcompfinalNode2 = (PCompFinal)nodeArrayList1.get(0);

        pcompvalNode1 = new ACompFinalCompVal(pcompfinalNode2);
        }
	nodeList.add(pcompvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce AExprCompFinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompFinal pcompfinalNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pcompfinalNode1 = new AExprCompFinal(pexpressionNode2);
        }
	nodeList.add(pcompfinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ATerminal$LocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PLocalDefinition plocaldefinitionNode1;
        plocaldefinitionNode1 = (PLocalDefinition)nodeArrayList1.get(0);
	if(plocaldefinitionNode1 != null)
	{
	  listNode2.add(plocaldefinitionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ANonTerminal$LocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PLocalDefinition plocaldefinitionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefinitionNode2 = (PLocalDefinition)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefinitionNode2 != null)
	{
	  listNode3.add(plocaldefinitionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce ATerminal$NextFparDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PNextFparDefinition pnextfpardefinitionNode1;
        pnextfpardefinitionNode1 = (PNextFparDefinition)nodeArrayList1.get(0);
	if(pnextfpardefinitionNode1 != null)
	{
	  listNode2.add(pnextfpardefinitionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce ANonTerminal$NextFparDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PNextFparDefinition pnextfpardefinitionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pnextfpardefinitionNode2 = (PNextFparDefinition)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pnextfpardefinitionNode2 != null)
	{
	  listNode3.add(pnextfpardefinitionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new117() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new118() /* reduce ATerminal$NextIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PNextIdentifier pnextidentifierNode1;
        pnextidentifierNode1 = (PNextIdentifier)nodeArrayList1.get(0);
	if(pnextidentifierNode1 != null)
	{
	  listNode2.add(pnextidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new119() /* reduce ANonTerminal$NextIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PNextIdentifier pnextidentifierNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pnextidentifierNode2 = (PNextIdentifier)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pnextidentifierNode2 != null)
	{
	  listNode3.add(pnextidentifierNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new120() /* reduce ATerminal$ArraySize */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArraySize parraysizeNode1;
        parraysizeNode1 = (PArraySize)nodeArrayList1.get(0);
	if(parraysizeNode1 != null)
	{
	  listNode2.add(parraysizeNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new121() /* reduce ANonTerminal$ArraySize */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArraySize parraysizeNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parraysizeNode2 = (PArraySize)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parraysizeNode2 != null)
	{
	  listNode3.add(parraysizeNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new122() /* reduce ATerminal$NextExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new123() /* reduce ANonTerminal$NextExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new124() /* reduce ATerminal$ArrayPosition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new125() /* reduce ANonTerminal$ArrayPosition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {37, SHIFT, 5}, },
			{{-1, ERROR, 2}, {42, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {0, SHIFT, 1}, {1, SHIFT, 6}, {12, SHIFT, 7}, },
			{{-1, ERROR, 5}, {14, SHIFT, 15}, },
			{{-1, ERROR, 6}, {37, SHIFT, 16}, },
			{{-1, ERROR, 7}, {5, SHIFT, 17}, {6, SHIFT, 18}, {11, SHIFT, 19}, {12, SHIFT, 7}, {13, SHIFT, 20}, {19, SHIFT, 21}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 9}, {0, SHIFT, 1}, {1, SHIFT, 6}, {12, SHIFT, 7}, {19, SHIFT, 30}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 14}, {0, SHIFT, 1}, {1, SHIFT, 6}, {12, SHIFT, 7}, },
			{{-1, ERROR, 15}, {9, SHIFT, 33}, {15, SHIFT, 34}, {19, SHIFT, 35}, {37, SHIFT, 36}, },
			{{-1, ERROR, 16}, {18, SHIFT, 40}, {20, SHIFT, 41}, },
			{{-1, ERROR, 17}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {36, SHIFT, 47}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, ERROR, 18}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {36, SHIFT, 47}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, ERROR, 19}, {14, SHIFT, 44}, {19, SHIFT, 67}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 55}, {14, SHIFT, 69}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 27}, {19, SHIFT, 70}, },
			{{-1, ERROR, 28}, {16, SHIFT, 71}, {21, SHIFT, 72}, },
			{{-1, ERROR, 29}, {5, SHIFT, 17}, {6, SHIFT, 18}, {11, SHIFT, 19}, {12, SHIFT, 7}, {13, SHIFT, 73}, {19, SHIFT, 21}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 33}, {37, SHIFT, 75}, },
			{{-1, ERROR, 34}, {20, SHIFT, 76}, },
			{{-1, ERROR, 35}, {9, SHIFT, 33}, {37, SHIFT, 36}, },
			{{-1, ERROR, 36}, {18, SHIFT, 40}, {20, SHIFT, 78}, },
			{{-1, ERROR, 37}, {15, SHIFT, 80}, {19, SHIFT, 35}, },
			{{-1, REDUCE, 114}, },
			{{-1, ERROR, 39}, {15, SHIFT, 82}, {19, SHIFT, 35}, },
			{{-1, ERROR, 40}, {37, SHIFT, 84}, },
			{{-1, ERROR, 41}, {2, SHIFT, 85}, {3, SHIFT, 86}, },
			{{-1, REDUCE, 118}, },
			{{-1, ERROR, 43}, {18, SHIFT, 40}, {20, SHIFT, 89}, },
			{{-1, ERROR, 44}, {14, SHIFT, 91}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 92}, {40, SHIFT, 93}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 47}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {36, SHIFT, 47}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, REDUCE, 97}, {14, SHIFT, 69}, {16, SHIFT, 100}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 111}, },
			{{-1, ERROR, 54}, {4, SHIFT, 103}, },
			{{-1, ERROR, 55}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 65}, {22, SHIFT, 105}, {23, SHIFT, 106}, },
			{{-1, REDUCE, 89}, {24, SHIFT, 107}, {26, SHIFT, 108}, {27, SHIFT, 109}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 71}, {29, SHIFT, 110}, },
			{{-1, REDUCE, 99}, {28, SHIFT, 111}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 103}, {30, SHIFT, 112}, {31, SHIFT, 113}, {32, SHIFT, 114}, {33, SHIFT, 115}, {34, SHIFT, 116}, {35, SHIFT, 117}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 66}, {8, SHIFT, 118}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 68}, {19, SHIFT, 119}, },
			{{-1, ERROR, 69}, {14, SHIFT, 44}, {15, SHIFT, 120}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 71}, {14, SHIFT, 44}, {17, SHIFT, 123}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, ERROR, 72}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 117}, },
			{{-1, ERROR, 75}, {18, SHIFT, 40}, {20, SHIFT, 126}, },
			{{-1, ERROR, 76}, {2, SHIFT, 85}, {3, SHIFT, 86}, {10, SHIFT, 128}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 78}, {2, SHIFT, 85}, {3, SHIFT, 86}, },
			{{-1, ERROR, 79}, {18, SHIFT, 40}, {20, SHIFT, 133}, },
			{{-1, ERROR, 80}, {20, SHIFT, 134}, },
			{{-1, ERROR, 81}, {15, SHIFT, 135}, {19, SHIFT, 35}, },
			{{-1, ERROR, 82}, {20, SHIFT, 136}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 21}, {16, SHIFT, 137}, },
			{{-1, ERROR, 88}, {19, SHIFT, 140}, },
			{{-1, ERROR, 89}, {2, SHIFT, 85}, {3, SHIFT, 86}, },
			{{-1, REDUCE, 119}, },
			{{-1, ERROR, 91}, {14, SHIFT, 91}, {37, SHIFT, 142}, {38, SHIFT, 49}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 95}, {15, SHIFT, 143}, },
			{{-1, ERROR, 96}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 98}, {15, SHIFT, 145}, {22, SHIFT, 105}, {23, SHIFT, 106}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 100}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 76}, {16, SHIFT, 100}, },
			{{-1, ERROR, 103}, {5, SHIFT, 17}, {6, SHIFT, 18}, {11, SHIFT, 19}, {12, SHIFT, 7}, {19, SHIFT, 21}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 105}, {14, SHIFT, 91}, {37, SHIFT, 142}, {38, SHIFT, 49}, },
			{{-1, ERROR, 106}, {14, SHIFT, 91}, {37, SHIFT, 142}, {38, SHIFT, 49}, },
			{{-1, ERROR, 107}, {14, SHIFT, 91}, {37, SHIFT, 142}, {38, SHIFT, 49}, },
			{{-1, ERROR, 108}, {14, SHIFT, 91}, {37, SHIFT, 142}, {38, SHIFT, 49}, },
			{{-1, ERROR, 109}, {14, SHIFT, 91}, {37, SHIFT, 142}, {38, SHIFT, 49}, },
			{{-1, ERROR, 110}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {36, SHIFT, 47}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, ERROR, 111}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {36, SHIFT, 47}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, ERROR, 112}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, ERROR, 113}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, ERROR, 114}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, ERROR, 115}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, ERROR, 116}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, ERROR, 117}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, ERROR, 118}, {5, SHIFT, 162}, {6, SHIFT, 163}, {11, SHIFT, 164}, {12, SHIFT, 7}, {19, SHIFT, 165}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 121}, {15, SHIFT, 172}, },
			{{-1, REDUCE, 52}, {18, SHIFT, 173}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 124}, {17, SHIFT, 176}, },
			{{-1, ERROR, 125}, {19, SHIFT, 177}, },
			{{-1, ERROR, 126}, {2, SHIFT, 85}, {3, SHIFT, 86}, },
			{{-1, ERROR, 127}, {18, SHIFT, 40}, {20, SHIFT, 179}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 24}, {16, SHIFT, 180}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 133}, {2, SHIFT, 85}, {3, SHIFT, 86}, },
			{{-1, ERROR, 134}, {2, SHIFT, 85}, {3, SHIFT, 86}, {10, SHIFT, 128}, },
			{{-1, ERROR, 135}, {20, SHIFT, 185}, },
			{{-1, ERROR, 136}, {2, SHIFT, 85}, {3, SHIFT, 86}, {10, SHIFT, 128}, },
			{{-1, ERROR, 137}, {38, SHIFT, 187}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 22}, {16, SHIFT, 137}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 141}, {19, SHIFT, 189}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 146}, {17, SHIFT, 190}, },
			{{-1, REDUCE, 125}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 87}, {24, SHIFT, 107}, {26, SHIFT, 108}, {27, SHIFT, 109}, },
			{{-1, REDUCE, 88}, {24, SHIFT, 107}, {26, SHIFT, 108}, {27, SHIFT, 109}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 98}, {28, SHIFT, 111}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 162}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {36, SHIFT, 47}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, ERROR, 163}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {36, SHIFT, 47}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, ERROR, 164}, {14, SHIFT, 44}, {19, SHIFT, 193}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, REDUCE, 31}, {7, REDUCE, 41}, },
			{{-1, REDUCE, 34}, {7, REDUCE, 44}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 168}, {7, SHIFT, 195}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 170}, {19, SHIFT, 196}, },
			{{-1, ERROR, 171}, {16, SHIFT, 71}, {21, SHIFT, 197}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 173}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 53}, {18, SHIFT, 173}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 179}, {2, SHIFT, 85}, {3, SHIFT, 86}, },
			{{-1, ERROR, 180}, {17, SHIFT, 201}, {38, SHIFT, 187}, },
			{{-1, REDUCE, 25}, {16, SHIFT, 137}, },
			{{-1, REDUCE, 26}, {16, SHIFT, 137}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 185}, {2, SHIFT, 85}, {3, SHIFT, 86}, {10, SHIFT, 128}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 187}, {17, SHIFT, 204}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 191}, {4, SHIFT, 205}, },
			{{-1, ERROR, 192}, {8, SHIFT, 206}, },
			{{-1, REDUCE, 37}, {7, REDUCE, 47}, },
			{{-1, ERROR, 194}, {19, SHIFT, 207}, },
			{{-1, ERROR, 195}, {5, SHIFT, 17}, {6, SHIFT, 18}, {11, SHIFT, 19}, {12, SHIFT, 7}, {19, SHIFT, 21}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 35}, {7, REDUCE, 45}, },
			{{-1, ERROR, 197}, {14, SHIFT, 44}, {22, SHIFT, 45}, {23, SHIFT, 46}, {37, SHIFT, 48}, {38, SHIFT, 49}, {39, SHIFT, 50}, {40, SHIFT, 51}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 27}, {16, SHIFT, 137}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 205}, {5, SHIFT, 162}, {6, SHIFT, 163}, {11, SHIFT, 164}, {12, SHIFT, 7}, {19, SHIFT, 165}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, ERROR, 206}, {5, SHIFT, 162}, {6, SHIFT, 163}, {11, SHIFT, 164}, {12, SHIFT, 7}, {19, SHIFT, 165}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 38}, {7, REDUCE, 48}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 209}, {19, SHIFT, 212}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 211}, {7, SHIFT, 213}, },
			{{-1, REDUCE, 32}, {7, REDUCE, 42}, },
			{{-1, ERROR, 213}, {5, SHIFT, 162}, {6, SHIFT, 163}, {11, SHIFT, 164}, {12, SHIFT, 7}, {19, SHIFT, 165}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 49}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 8}, {0, 3}, },
			{{-1, 9}, {0, 4}, },
			{{-1, 10}, {14, 31}, },
			{{-1, 24}, {4, 11}, {9, 11}, {14, 32}, {118, 166}, {205, 166}, {206, 166}, {213, 166}, },
			{{-1, 37}, {35, 77}, },
			{{-1, 38}, {39, 83}, {81, 83}, },
			{{-1, 129}, {134, 184}, {136, 186}, {185, 203}, },
			{{-1, 131}, {41, 87}, {76, 130}, {89, 87}, {134, 130}, {136, 130}, {185, 130}, },
			{{-1, 88}, {89, 141}, },
			{{-1, 12}, },
			{{-1, 132}, {126, 178}, {133, 183}, {179, 200}, },
			{{-1, 13}, },
			{{-1, 42}, {43, 90}, {79, 90}, {127, 90}, },
			{{-1, 148}, {7, 25}, {29, 74}, {118, 167}, {195, 208}, {206, 167}, {213, 208}, },
			{{-1, 26}, },
			{{-1, 168}, {205, 210}, {206, 211}, {213, 214}, },
			{{-1, 169}, },
			{{-1, 52}, {7, 27}, {29, 27}, {44, 94}, {103, 27}, {118, 170}, {195, 27}, {205, 170}, {206, 170}, {213, 170}, },
			{{-1, 121}, },
			{{-1, 174}, {175, 199}, },
			{{-1, 28}, {118, 171}, {205, 171}, {206, 171}, {213, 171}, },
			{{-1, 53}, {19, 68}, {55, 104}, {69, 122}, {71, 124}, {72, 125}, {96, 144}, {100, 146}, {164, 194}, {173, 198}, {197, 209}, },
			{{-1, 95}, },
			{{-1, 54}, {18, 66}, {162, 191}, {163, 192}, },
			{{-1, 55}, {44, 96}, },
			{{-1, 138}, {139, 188}, {182, 188}, {202, 188}, },
			{{-1, 181}, },
			{{-1, 56}, {44, 97}, },
			{{-1, 101}, {102, 147}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 57}, {44, 98}, {91, 98}, },
			{{-1, 58}, {105, 149}, {106, 150}, },
			{{-1, 59}, {107, 151}, {108, 152}, {109, 153}, },
			{{-1, 60}, },
			{{-1, 61}, },
			{{-1, 62}, {110, 154}, },
			{{-1, 63}, {47, 99}, {111, 155}, },
			{{-1, 64}, },
			{{-1, 65}, {112, 156}, {113, 157}, {114, 158}, {115, 159}, {116, 160}, {117, 161}, },
			{{-1, 14}, },
			{{-1, 39}, {37, 81}, },
			{{-1, 29}, },
			{{-1, 43}, {36, 79}, {75, 127}, },
			{{-1, 139}, {131, 182}, {181, 202}, },
			{{-1, 175}, },
			{{-1, 102}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'fun'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: 'fun', 'var', '{'",
			"expecting: '('",
			"expecting: 'while', 'if', 'return', '{', '}', semicolon, identifier, string literal",
			"expecting: 'fun', 'var', '{', semicolon",
			"expecting: 'fun', 'var', '{', EOF",
			"expecting: 'ref', ')', semicolon, identifier",
			"expecting: ',', ':'",
			"expecting: '(', '+', '-', 'not', identifier, int const, char const, string literal",
			"expecting: '(', semicolon, '+', '-', identifier, int const, char const, string literal",
			"expecting: 'fun', 'var', 'while', 'if', 'else', 'return', '{', '}', semicolon, identifier, string literal, EOF",
			"expecting: '(', '[', '<-'",
			"expecting: '[', '<-'",
			"expecting: semicolon",
			"expecting: ':'",
			"expecting: 'ref', identifier",
			"expecting: ')', semicolon",
			"expecting: 'char', 'int'",
			"expecting: '(', '+', '-', identifier, int const, char const, string literal",
			"expecting: 'do', 'then', '(', ')', '[', ']', ',', semicolon, '+', '-', '*', 'mod', 'div', 'and', 'or', '#', '=', '<', '<=', '>', '>='",
			"expecting: 'do', 'then', ')', ']', ',', semicolon, '+', '-', '*', 'mod', 'div', 'and', 'or', '#', '=', '<', '<=', '>', '>='",
			"expecting: 'do', 'then', ')', ']', ',', semicolon, 'and', 'or', '#', '=', '<', '<=', '>', '>='",
			"expecting: 'do', 'then', 'and', 'or', '#', '=', '<', '<=', '>', '>='",
			"expecting: 'do'",
			"expecting: 'do', 'then', ')', ']', ',', semicolon, '+', '-', 'and', 'or', '#', '=', '<', '<=', '>', '>='",
			"expecting: 'do', 'then', 'or'",
			"expecting: 'do', 'then', 'and', 'or'",
			"expecting: 'then'",
			"expecting: '(', ')', '+', '-', identifier, int const, char const, string literal",
			"expecting: '(', ']', '+', '-', identifier, int const, char const, string literal",
			"expecting: 'char', 'int', 'nothing'",
			"expecting: 'fun', 'var', '{', ')', '[', semicolon",
			"expecting: '[', semicolon",
			"expecting: '(', identifier, int const",
			"expecting: ')'",
			"expecting: ')', '+', '-'",
			"expecting: 'do', 'then', ')', '[', ']', ',', semicolon, 'and', 'or', '#', '=', '<', '<=', '>', '>='",
			"expecting: 'while', 'if', 'return', '{', semicolon, identifier, string literal",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: ')', '[', semicolon",
			"expecting: int const",
			"expecting: 'while', 'if', 'else', 'return', '{', '}', semicolon, identifier, string literal",
			"expecting: 'else'",
			"expecting: ']', int const",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 1, 5, 3, 6, 3, 7, 3, 3, 3, 8, 9, 10, 10, 11, 12, 5, 13, 14, 5, 5, 5, 15, 14, 5, 3, 3, 7, 1, 16, 17, 9, 18, 18, 18, 1, 19, 9, 9, 20, 20, 20, 10, 21, 22, 23, 23, 23, 24, 25, 20, 23, 26, 22, 22, 22, 27, 28, 28, 24, 24, 29, 5, 15, 30, 5, 31, 20, 12, 5, 9, 32, 18, 19, 9, 16, 18, 16, 18, 9, 33, 33, 34, 15, 19, 9, 35, 36, 36, 36, 36, 20, 36, 37, 28, 20, 38, 38, 39, 23, 35, 35, 35, 35, 35, 10, 10, 20, 20, 20, 20, 20, 20, 39, 5, 23, 36, 40, 14, 41, 15, 19, 9, 6, 6, 6, 42, 18, 19, 32, 16, 32, 43, 42, 34, 3, 15, 22, 23, 36, 22, 41, 38, 5, 22, 22, 22, 22, 22, 28, 28, 24, 24, 24, 24, 24, 24, 10, 10, 11, 44, 44, 5, 45, 45, 15, 14, 23, 20, 40, 40, 14, 5, 18, 19, 46, 42, 42, 18, 6, 32, 6, 41, 42, 3, 38, 25, 29, 44, 15, 39, 44, 20, 40, 40, 18, 42, 42, 6, 42, 39, 39, 44, 5, 15, 45, 45, 44, 39, 45, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
