/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.parser;

import sablecc.lexer.*;
import sablecc.node.*;
import sablecc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAfunctiondefinition1FunctionDefinition */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAfunctiondefinition2FunctionDefinition */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAheader1Header */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AAheader2Header */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AFDefLocalDefinition */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AFDeclLocalDefinition */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AVarDefLocalDefinition */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AAblock1Block */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AAblock2Block */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce AAfpardefinition1FparDefinition */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce AAfpardefinition2FparDefinition */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce ANextFparDefinition */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce ADataTypeRetType */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce ANothingRetType */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce AIntegerDataType */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce ACharacterDataType */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce AAtype1Type */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list, false);
            }
            break;
            case 18: /* reduce AAtype2Type */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list, false);
            }
            break;
            case 19: /* reduce AFunctionDeclaration */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list, false);
            }
            break;
            case 20: /* reduce AAfpartype1FparType */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list, false);
            }
            break;
            case 21: /* reduce AAfpartype2FparType */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list, false);
            }
            break;
            case 22: /* reduce AAfpartype3FparType */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list, false);
            }
            break;
            case 23: /* reduce AAfpartype4FparType */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list, false);
            }
            break;
            case 24: /* reduce AAvardefinition1VarDefinition */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list, false);
            }
            break;
            case 25: /* reduce AAvardefinition2VarDefinition */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list, false);
            }
            break;
            case 26: /* reduce ANextIdentifier */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list, false);
            }
            break;
            case 27: /* reduce ANoopStatement */
            {
                ArrayList<Object> list = new27();
                push(goTo(14), list, false);
            }
            break;
            case 28: /* reduce AAssignmentStatement */
            {
                ArrayList<Object> list = new28();
                push(goTo(14), list, false);
            }
            break;
            case 29: /* reduce AIfStatement */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list, false);
            }
            break;
            case 30: /* reduce ABlockStatement */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce AFCallStatement */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list, false);
            }
            break;
            case 32: /* reduce AWhileDoStatement */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list, false);
            }
            break;
            case 33: /* reduce AAreturnstatement1Statement */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list, false);
            }
            break;
            case 34: /* reduce AAreturnstatement2Statement */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list, false);
            }
            break;
            case 35: /* reduce ANoElseIfStmt */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list, false);
            }
            break;
            case 36: /* reduce AWithElseIfStmt */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list, false);
            }
            break;
            case 37: /* reduce ANoopStmtWithElse */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list, false);
            }
            break;
            case 38: /* reduce AAssignmentStmtWithElse */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list, false);
            }
            break;
            case 39: /* reduce AIfStmtWithElse */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list, false);
            }
            break;
            case 40: /* reduce ABlockStmtWithElse */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list, false);
            }
            break;
            case 41: /* reduce AFCallStmtWithElse */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list, false);
            }
            break;
            case 42: /* reduce AWhileDoStmtWithElse */
            {
                ArrayList<Object> list = new42();
                push(goTo(16), list, false);
            }
            break;
            case 43: /* reduce AAreturnstmtwithelse1StmtWithElse */
            {
                ArrayList<Object> list = new43();
                push(goTo(16), list, false);
            }
            break;
            case 44: /* reduce AAreturnstmtwithelse2StmtWithElse */
            {
                ArrayList<Object> list = new44();
                push(goTo(16), list, false);
            }
            break;
            case 45: /* reduce AIfElseStmt */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list, false);
            }
            break;
            case 46: /* reduce AAfunccall1FuncCall */
            {
                ArrayList<Object> list = new46();
                push(goTo(18), list, false);
            }
            break;
            case 47: /* reduce AAfunccall2FuncCall */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list, false);
            }
            break;
            case 48: /* reduce AIdentifierLValue */
            {
                ArrayList<Object> list = new48();
                push(goTo(19), list, false);
            }
            break;
            case 49: /* reduce AStringLitLValue */
            {
                ArrayList<Object> list = new49();
                push(goTo(19), list, false);
            }
            break;
            case 50: /* reduce AAarrayassignlvalue1LValue */
            {
                ArrayList<Object> list = new50();
                push(goTo(19), list, false);
            }
            break;
            case 51: /* reduce AAarrayassignlvalue2LValue */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list, false);
            }
            break;
            case 52: /* reduce AIntConstExpression */
            {
                ArrayList<Object> list = new52();
                push(goTo(20), list, false);
            }
            break;
            case 53: /* reduce ACharConstExpression */
            {
                ArrayList<Object> list = new53();
                push(goTo(20), list, false);
            }
            break;
            case 54: /* reduce ALValueExpression */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list, false);
            }
            break;
            case 55: /* reduce AFCallExpression */
            {
                ArrayList<Object> list = new55();
                push(goTo(20), list, false);
            }
            break;
            case 56: /* reduce AParenExpressionExpression */
            {
                ArrayList<Object> list = new56();
                push(goTo(20), list, false);
            }
            break;
            case 57: /* reduce ASignedExpressionExpression */
            {
                ArrayList<Object> list = new57();
                push(goTo(20), list, false);
            }
            break;
            case 58: /* reduce AParenCondCondition */
            {
                ArrayList<Object> list = new58();
                push(goTo(21), list, false);
            }
            break;
            case 59: /* reduce ANotConditionCondition */
            {
                ArrayList<Object> list = new59();
                push(goTo(21), list, false);
            }
            break;
            case 60: /* reduce AComparisonCondition */
            {
                ArrayList<Object> list = new60();
                push(goTo(21), list, false);
            }
            break;
            case 61: /* reduce ANextExpression */
            {
                ArrayList<Object> list = new61();
                push(goTo(22), list, false);
            }
            break;
            case 62: /* reduce AAmultipleexpressions1MultipleExpressions */
            {
                ArrayList<Object> list = new62();
                push(goTo(23), list, false);
            }
            break;
            case 63: /* reduce AAmultipleexpressions2MultipleExpressions */
            {
                ArrayList<Object> list = new63();
                push(goTo(23), list, false);
            }
            break;
            case 64: /* reduce AArraySize */
            {
                ArrayList<Object> list = new64();
                push(goTo(24), list, false);
            }
            break;
            case 65: /* reduce AEmptyBrackets */
            {
                ArrayList<Object> list = new65();
                push(goTo(25), list, false);
            }
            break;
            case 66: /* reduce APlusSign */
            {
                ArrayList<Object> list = new66();
                push(goTo(26), list, false);
            }
            break;
            case 67: /* reduce AMinusSign */
            {
                ArrayList<Object> list = new67();
                push(goTo(26), list, false);
            }
            break;
            case 68: /* reduce APlusNumOperations */
            {
                ArrayList<Object> list = new68();
                push(goTo(27), list, false);
            }
            break;
            case 69: /* reduce AMinusNumOperations */
            {
                ArrayList<Object> list = new69();
                push(goTo(27), list, false);
            }
            break;
            case 70: /* reduce AMultNumOperations */
            {
                ArrayList<Object> list = new70();
                push(goTo(27), list, false);
            }
            break;
            case 71: /* reduce AModNumOperations */
            {
                ArrayList<Object> list = new71();
                push(goTo(27), list, false);
            }
            break;
            case 72: /* reduce ADivNumOperations */
            {
                ArrayList<Object> list = new72();
                push(goTo(27), list, false);
            }
            break;
            case 73: /* reduce AOrLogicOperations */
            {
                ArrayList<Object> list = new73();
                push(goTo(28), list, false);
            }
            break;
            case 74: /* reduce AAndLogicOperations */
            {
                ArrayList<Object> list = new74();
                push(goTo(28), list, false);
            }
            break;
            case 75: /* reduce AEqualsComparisonSymbols */
            {
                ArrayList<Object> list = new75();
                push(goTo(29), list, false);
            }
            break;
            case 76: /* reduce ANotEqualsComparisonSymbols */
            {
                ArrayList<Object> list = new76();
                push(goTo(29), list, false);
            }
            break;
            case 77: /* reduce ALessThanComparisonSymbols */
            {
                ArrayList<Object> list = new77();
                push(goTo(29), list, false);
            }
            break;
            case 78: /* reduce AGreaterThanComparisonSymbols */
            {
                ArrayList<Object> list = new78();
                push(goTo(29), list, false);
            }
            break;
            case 79: /* reduce AGreaterOrEqualComparisonSymbols */
            {
                ArrayList<Object> list = new79();
                push(goTo(29), list, false);
            }
            break;
            case 80: /* reduce ALessOrEqualComparisonSymbols */
            {
                ArrayList<Object> list = new80();
                push(goTo(29), list, false);
            }
            break;
            case 81: /* reduce ATerminal$LocalDefinition */
            {
                ArrayList<Object> list = new81();
                push(goTo(30), list, true);
            }
            break;
            case 82: /* reduce ANonTerminal$LocalDefinition */
            {
                ArrayList<Object> list = new82();
                push(goTo(30), list, true);
            }
            break;
            case 83: /* reduce ATerminal$NextFparDefinition */
            {
                ArrayList<Object> list = new83();
                push(goTo(31), list, true);
            }
            break;
            case 84: /* reduce ANonTerminal$NextFparDefinition */
            {
                ArrayList<Object> list = new84();
                push(goTo(31), list, true);
            }
            break;
            case 85: /* reduce ATerminal$Statement */
            {
                ArrayList<Object> list = new85();
                push(goTo(32), list, true);
            }
            break;
            case 86: /* reduce ANonTerminal$Statement */
            {
                ArrayList<Object> list = new86();
                push(goTo(32), list, true);
            }
            break;
            case 87: /* reduce ATerminal$NextIdentifier */
            {
                ArrayList<Object> list = new87();
                push(goTo(33), list, true);
            }
            break;
            case 88: /* reduce ANonTerminal$NextIdentifier */
            {
                ArrayList<Object> list = new88();
                push(goTo(33), list, true);
            }
            break;
            case 89: /* reduce ATerminal$ArraySize */
            {
                ArrayList<Object> list = new89();
                push(goTo(34), list, true);
            }
            break;
            case 90: /* reduce ANonTerminal$ArraySize */
            {
                ArrayList<Object> list = new90();
                push(goTo(34), list, true);
            }
            break;
            case 91: /* reduce ATerminal$NextExpression */
            {
                ArrayList<Object> list = new91();
                push(goTo(35), list, true);
            }
            break;
            case 92: /* reduce ANonTerminal$NextExpression */
            {
                ArrayList<Object> list = new92();
                push(goTo(35), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFunctionDefinition pfunctiondefinitionNode2;
        pfunctiondefinitionNode2 = (PFunctionDefinition)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pfunctiondefinitionNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAfunctiondefinition1FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PBlock pblockNode4;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        }
        pblockNode4 = (PBlock)nodeArrayList2.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(pheaderNode2, listNode3, pblockNode4);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAfunctiondefinition2FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PBlock pblockNode5;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pblockNode5 = (PBlock)nodeArrayList3.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(pheaderNode2, listNode4, pblockNode5);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAheader1Header */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TKwFun tkwfunNode2;
        TIdentifier tidentifierNode3;
        TLparen tlparenNode4;
        PFparDefinition pfpardefinitionNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TRparen trparenNode7;
        TColon tcolonNode8;
        PRetType prettypeNode9;
        tkwfunNode2 = (TKwFun)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        pfpardefinitionNode5 = (PFparDefinition)nodeArrayList4.get(0);
        {
            // Block
        }
        trparenNode7 = (TRparen)nodeArrayList5.get(0);
        tcolonNode8 = (TColon)nodeArrayList6.get(0);
        prettypeNode9 = (PRetType)nodeArrayList7.get(0);

        pheaderNode1 = new AHeader(tkwfunNode2, tidentifierNode3, tlparenNode4, pfpardefinitionNode5, listNode6, trparenNode7, tcolonNode8, prettypeNode9);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAheader2Header */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TKwFun tkwfunNode2;
        TIdentifier tidentifierNode3;
        TLparen tlparenNode4;
        PFparDefinition pfpardefinitionNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TRparen trparenNode8;
        TColon tcolonNode9;
        PRetType prettypeNode10;
        tkwfunNode2 = (TKwFun)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        pfpardefinitionNode5 = (PFparDefinition)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        trparenNode8 = (TRparen)nodeArrayList6.get(0);
        tcolonNode9 = (TColon)nodeArrayList7.get(0);
        prettypeNode10 = (PRetType)nodeArrayList8.get(0);

        pheaderNode1 = new AHeader(tkwfunNode2, tidentifierNode3, tlparenNode4, pfpardefinitionNode5, listNode7, trparenNode8, tcolonNode9, prettypeNode10);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AFDefLocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDefinition plocaldefinitionNode1;
        {
            // Block
        PFunctionDefinition pfunctiondefinitionNode2;
        pfunctiondefinitionNode2 = (PFunctionDefinition)nodeArrayList1.get(0);

        plocaldefinitionNode1 = new AFDefLocalDefinition(pfunctiondefinitionNode2);
        }
	nodeList.add(plocaldefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AFDeclLocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDefinition plocaldefinitionNode1;
        {
            // Block
        PFunctionDeclaration pfunctiondeclarationNode2;
        pfunctiondeclarationNode2 = (PFunctionDeclaration)nodeArrayList1.get(0);

        plocaldefinitionNode1 = new AFDeclLocalDefinition(pfunctiondeclarationNode2);
        }
	nodeList.add(plocaldefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AVarDefLocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDefinition plocaldefinitionNode1;
        {
            // Block
        PVarDefinition pvardefinitionNode2;
        pvardefinitionNode2 = (PVarDefinition)nodeArrayList1.get(0);

        plocaldefinitionNode1 = new AVarDefLocalDefinition(pvardefinitionNode2);
        }
	nodeList.add(plocaldefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TRbrace trbraceNode4;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        {
            // Block
        }
        trbraceNode4 = (TRbrace)nodeArrayList2.get(0);

        pblockNode1 = new ABlock(tlbraceNode2, listNode3, trbraceNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRbrace trbraceNode5;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbraceNode5 = (TRbrace)nodeArrayList3.get(0);

        pblockNode1 = new ABlock(tlbraceNode2, listNode4, trbraceNode5);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAfpardefinition1FparDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDefinition pfpardefinitionNode1;
        {
            // Block
        TKwRef tkwrefNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TColon tcolonNode5;
        PFparType pfpartypeNode6;
        tkwrefNode2 = (TKwRef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        pfpartypeNode6 = (PFparType)nodeArrayList4.get(0);

        pfpardefinitionNode1 = new AFparDefinition(tkwrefNode2, tidentifierNode3, listNode4, tcolonNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAfpardefinition2FparDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDefinition pfpardefinitionNode1;
        {
            // Block
        TKwRef tkwrefNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TColon tcolonNode6;
        PFparType pfpartypeNode7;
        tkwrefNode2 = (TKwRef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tcolonNode6 = (TColon)nodeArrayList4.get(0);
        pfpartypeNode7 = (PFparType)nodeArrayList5.get(0);

        pfpardefinitionNode1 = new AFparDefinition(tkwrefNode2, tidentifierNode3, listNode5, tcolonNode6, pfpartypeNode7);
        }
	nodeList.add(pfpardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ANextFparDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNextFparDefinition pnextfpardefinitionNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        PFparDefinition pfpardefinitionNode3;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);
        pfpardefinitionNode3 = (PFparDefinition)nodeArrayList2.get(0);

        pnextfpardefinitionNode1 = new ANextFparDefinition(tsemicolonNode2, pfpardefinitionNode3);
        }
	nodeList.add(pnextfpardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ADataTypeRetType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);

        prettypeNode1 = new ADataTypeRetType(pdatatypeNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANothingRetType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        TKwNothing tkwnothingNode2;
        tkwnothingNode2 = (TKwNothing)nodeArrayList1.get(0);

        prettypeNode1 = new ANothingRetType(tkwnothingNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AIntegerDataType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TKwInt tkwintNode2;
        tkwintNode2 = (TKwInt)nodeArrayList1.get(0);

        pdatatypeNode1 = new AIntegerDataType(tkwintNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ACharacterDataType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TKwChar tkwcharNode2;
        tkwcharNode2 = (TKwChar)nodeArrayList1.get(0);

        pdatatypeNode1 = new ACharacterDataType(tkwcharNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAtype1Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        }

        ptypeNode1 = new AType(pdatatypeNode2, listNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAtype2Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypeNode1 = new AType(pdatatypeNode2, listNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AFunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDeclaration pfunctiondeclarationNode1;
        {
            // Block
        PHeader pheaderNode2;
        TSemicolon tsemicolonNode3;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pfunctiondeclarationNode1 = new AFunctionDeclaration(pheaderNode2, tsemicolonNode3);
        }
	nodeList.add(pfunctiondeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAfpartype1FparType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, null, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAfpartype2FparType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PEmptyBrackets pemptybracketsNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        pemptybracketsNode3 = (PEmptyBrackets)nodeArrayList2.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, pemptybracketsNode3, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAfpartype3FparType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, null, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAfpartype4FparType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PEmptyBrackets pemptybracketsNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        pemptybracketsNode3 = (PEmptyBrackets)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, pemptybracketsNode3, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAvardefinition1VarDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDefinition pvardefinitionNode1;
        {
            // Block
        TKwVar tkwvarNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TColon tcolonNode5;
        PType ptypeNode6;
        TSemicolon tsemicolonNode7;
        tkwvarNode2 = (TKwVar)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        ptypeNode6 = (PType)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pvardefinitionNode1 = new AVarDefinition(tkwvarNode2, tidentifierNode3, listNode4, tcolonNode5, ptypeNode6, tsemicolonNode7);
        }
	nodeList.add(pvardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAvardefinition2VarDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDefinition pvardefinitionNode1;
        {
            // Block
        TKwVar tkwvarNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TColon tcolonNode6;
        PType ptypeNode7;
        TSemicolon tsemicolonNode8;
        tkwvarNode2 = (TKwVar)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tcolonNode6 = (TColon)nodeArrayList4.get(0);
        ptypeNode7 = (PType)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);

        pvardefinitionNode1 = new AVarDefinition(tkwvarNode2, tidentifierNode3, listNode5, tcolonNode6, ptypeNode7, tsemicolonNode8);
        }
	nodeList.add(pvardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ANextIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNextIdentifier pnextidentifierNode1;
        {
            // Block
        TComma tcommaNode2;
        TIdentifier tidentifierNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pnextidentifierNode1 = new ANextIdentifier(tcommaNode2, tidentifierNode3);
        }
	nodeList.add(pnextidentifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ANoopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pstatementNode1 = new ANoopStatement(tsemicolonNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAssignmentStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PLValue plvalueNode2;
        TAssign tassignNode3;
        PExpression pexpressionNode4;
        TSemicolon tsemicolonNode5;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pstatementNode1 = new AAssignmentStatement(plvalueNode2, tassignNode3, pexpressionNode4, tsemicolonNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIfStmt pifstmtNode2;
        pifstmtNode2 = (PIfStmt)nodeArrayList1.get(0);

        pstatementNode1 = new AIfStatement(pifstmtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ABlockStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstatementNode1 = new ABlockStatement(pblockNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AFCallStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        TSemicolon tsemicolonNode3;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pstatementNode1 = new AFCallStatement(pfunccallNode2, tsemicolonNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AWhileDoStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TKwWhile tkwwhileNode2;
        PCondition pconditionNode3;
        TKwDo tkwdoNode4;
        PStatement pstatementNode5;
        tkwwhileNode2 = (TKwWhile)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        tkwdoNode4 = (TKwDo)nodeArrayList3.get(0);
        pstatementNode5 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileDoStatement(tkwwhileNode2, pconditionNode3, tkwdoNode4, pstatementNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAreturnstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TKwReturn tkwreturnNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TSemicolon tsemicolonNode4;
        tkwreturnNode2 = (TKwReturn)nodeArrayList1.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(tkwreturnNode2, null, tsemicolonNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAreturnstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TKwReturn tkwreturnNode2;
        PExpression pexpressionNode3;
        TSemicolon tsemicolonNode4;
        tkwreturnNode2 = (TKwReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pstatementNode1 = new AReturnStatement(tkwreturnNode2, pexpressionNode3, tsemicolonNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ANoElseIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TKwIf tkwifNode2;
        PCondition pconditionNode3;
        TKwThen tkwthenNode4;
        PStatement pstatementNode5;
        tkwifNode2 = (TKwIf)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        tkwthenNode4 = (TKwThen)nodeArrayList3.get(0);
        pstatementNode5 = (PStatement)nodeArrayList4.get(0);

        pifstmtNode1 = new ANoElseIfStmt(tkwifNode2, pconditionNode3, tkwthenNode4, pstatementNode5);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AWithElseIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TKwIf tkwifNode2;
        PCondition pconditionNode3;
        TKwThen tkwthenNode4;
        PStmtWithElse pstmtwithelseNode5;
        TKwElse tkwelseNode6;
        PStatement pstatementNode7;
        tkwifNode2 = (TKwIf)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        tkwthenNode4 = (TKwThen)nodeArrayList3.get(0);
        pstmtwithelseNode5 = (PStmtWithElse)nodeArrayList4.get(0);
        tkwelseNode6 = (TKwElse)nodeArrayList5.get(0);
        pstatementNode7 = (PStatement)nodeArrayList6.get(0);

        pifstmtNode1 = new AWithElseIfStmt(tkwifNode2, pconditionNode3, tkwthenNode4, pstmtwithelseNode5, tkwelseNode6, pstatementNode7);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ANoopStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pstmtwithelseNode1 = new ANoopStmtWithElse(tsemicolonNode2);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAssignmentStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PLValue plvalueNode2;
        TAssign tassignNode3;
        PExpression pexpressionNode4;
        TSemicolon tsemicolonNode5;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pstmtwithelseNode1 = new AAssignmentStmtWithElse(plvalueNode2, tassignNode3, pexpressionNode4, tsemicolonNode5);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AIfStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PIfElseStmt pifelsestmtNode2;
        pifelsestmtNode2 = (PIfElseStmt)nodeArrayList1.get(0);

        pstmtwithelseNode1 = new AIfStmtWithElse(pifelsestmtNode2);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ABlockStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstmtwithelseNode1 = new ABlockStmtWithElse(pblockNode2);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AFCallStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        TSemicolon tsemicolonNode3;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pstmtwithelseNode1 = new AFCallStmtWithElse(pfunccallNode2, tsemicolonNode3);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AWhileDoStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        TKwWhile tkwwhileNode2;
        PCondition pconditionNode3;
        TKwDo tkwdoNode4;
        PStmtWithElse pstmtwithelseNode5;
        tkwwhileNode2 = (TKwWhile)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        tkwdoNode4 = (TKwDo)nodeArrayList3.get(0);
        pstmtwithelseNode5 = (PStmtWithElse)nodeArrayList4.get(0);

        pstmtwithelseNode1 = new AWhileDoStmtWithElse(tkwwhileNode2, pconditionNode3, tkwdoNode4, pstmtwithelseNode5);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAreturnstmtwithelse1StmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        TKwReturn tkwreturnNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TSemicolon tsemicolonNode4;
        tkwreturnNode2 = (TKwReturn)nodeArrayList1.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList2.get(0);

        pstmtwithelseNode1 = new AReturnStmtWithElse(tkwreturnNode2, null, tsemicolonNode4);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAreturnstmtwithelse2StmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        TKwReturn tkwreturnNode2;
        PExpression pexpressionNode3;
        TSemicolon tsemicolonNode4;
        tkwreturnNode2 = (TKwReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pstmtwithelseNode1 = new AReturnStmtWithElse(tkwreturnNode2, pexpressionNode3, tsemicolonNode4);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AIfElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfElseStmt pifelsestmtNode1;
        {
            // Block
        TKwIf tkwifNode2;
        PCondition pconditionNode3;
        TKwThen tkwthenNode4;
        PStmtWithElse pstmtwithelseNode5;
        TKwElse tkwelseNode6;
        PStmtWithElse pstmtwithelseNode7;
        tkwifNode2 = (TKwIf)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        tkwthenNode4 = (TKwThen)nodeArrayList3.get(0);
        pstmtwithelseNode5 = (PStmtWithElse)nodeArrayList4.get(0);
        tkwelseNode6 = (TKwElse)nodeArrayList5.get(0);
        pstmtwithelseNode7 = (PStmtWithElse)nodeArrayList6.get(0);

        pifelsestmtNode1 = new AIfElseStmt(tkwifNode2, pconditionNode3, tkwthenNode4, pstmtwithelseNode5, tkwelseNode6, pstmtwithelseNode7);
        }
	nodeList.add(pifelsestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAfunccall1FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLparen tlparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRparen trparenNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        trparenNode5 = (TRparen)nodeArrayList3.get(0);

        pfunccallNode1 = new AFuncCall(tidentifierNode2, tlparenNode3, null, trparenNode5);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAfunccall2FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLparen tlparenNode3;
        PMultipleExpressions pmultipleexpressionsNode4;
        TRparen trparenNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pmultipleexpressionsNode4 = (PMultipleExpressions)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);

        pfunccallNode1 = new AFuncCall(tidentifierNode2, tlparenNode3, pmultipleexpressionsNode4, trparenNode5);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AIdentifierLValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        plvalueNode1 = new AIdentifierLValue(tidentifierNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AStringLitLValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        plvalueNode1 = new AStringLitLValue(tstringliteralNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAarrayassignlvalue1LValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        PLValue plvalueNode2;
        TLbracket tlbracketNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRbracket trbracketNode5;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        tlbracketNode3 = (TLbracket)nodeArrayList2.get(0);
        trbracketNode5 = (TRbracket)nodeArrayList3.get(0);

        plvalueNode1 = new AArrayAssignLValue(plvalueNode2, tlbracketNode3, null, trbracketNode5);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAarrayassignlvalue2LValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        PLValue plvalueNode2;
        TLbracket tlbracketNode3;
        PExpression pexpressionNode4;
        TRbracket trbracketNode5;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        tlbracketNode3 = (TLbracket)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trbracketNode5 = (TRbracket)nodeArrayList4.get(0);

        plvalueNode1 = new AArrayAssignLValue(plvalueNode2, tlbracketNode3, pexpressionNode4, trbracketNode5);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AIntConstExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIntConst tintconstNode2;
        tintconstNode2 = (TIntConst)nodeArrayList1.get(0);

        pexpressionNode1 = new AIntConstExpression(tintconstNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ACharConstExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TCharConst tcharconstNode2;
        tcharconstNode2 = (TCharConst)nodeArrayList1.get(0);

        pexpressionNode1 = new ACharConstExpression(tcharconstNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ALValueExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PLValue plvalueNode2;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);

        pexpressionNode1 = new ALValueExpression(plvalueNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AFCallExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pexpressionNode1 = new AFCallExpression(pfunccallNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AParenExpressionExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TLparen tlparenNode2;
        PExpression pexpressionNode3;
        TRparen trparenNode4;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparenNode4 = (TRparen)nodeArrayList3.get(0);

        pexpressionNode1 = new AParenExpressionExpression(tlparenNode2, pexpressionNode3, trparenNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ASignedExpressionExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PSign psignNode2;
        PExpression pexpressionNode3;
        psignNode2 = (PSign)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ASignedExpressionExpression(psignNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AParenCondCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        TLparen tlparenNode2;
        PCondition pconditionNode3;
        TRparen trparenNode4;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        trparenNode4 = (TRparen)nodeArrayList3.get(0);

        pconditionNode1 = new AParenCondCondition(tlparenNode2, pconditionNode3, trparenNode4);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ANotConditionCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        TKwNot tkwnotNode2;
        PCondition pconditionNode3;
        tkwnotNode2 = (TKwNot)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);

        pconditionNode1 = new ANotConditionCondition(tkwnotNode2, pconditionNode3);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AComparisonCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PComparisonSymbols pcomparisonsymbolsNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pcomparisonsymbolsNode3 = (PComparisonSymbols)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pconditionNode1 = new AComparisonCondition(pexpressionNode2, pcomparisonsymbolsNode3, pexpressionNode4);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ANextExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNextExpression pnextexpressionNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pnextexpressionNode1 = new ANextExpression(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pnextexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAmultipleexpressions1MultipleExpressions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultipleExpressions pmultipleexpressionsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pmultipleexpressionsNode1 = new AMultipleExpressions(pexpressionNode2, listNode3);
        }
	nodeList.add(pmultipleexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAmultipleexpressions2MultipleExpressions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultipleExpressions pmultipleexpressionsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pmultipleexpressionsNode1 = new AMultipleExpressions(pexpressionNode2, listNode4);
        }
	nodeList.add(pmultipleexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AArraySize */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArraySize parraysizeNode1;
        {
            // Block
        TLbracket tlbracketNode2;
        TIntConst tintconstNode3;
        TRbracket trbracketNode4;
        tlbracketNode2 = (TLbracket)nodeArrayList1.get(0);
        tintconstNode3 = (TIntConst)nodeArrayList2.get(0);
        trbracketNode4 = (TRbracket)nodeArrayList3.get(0);

        parraysizeNode1 = new AArraySize(tlbracketNode2, tintconstNode3, trbracketNode4);
        }
	nodeList.add(parraysizeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AEmptyBrackets */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEmptyBrackets pemptybracketsNode1;
        {
            // Block
        TLbracket tlbracketNode2;
        TRbracket trbracketNode3;
        tlbracketNode2 = (TLbracket)nodeArrayList1.get(0);
        trbracketNode3 = (TRbracket)nodeArrayList2.get(0);

        pemptybracketsNode1 = new AEmptyBrackets(tlbracketNode2, trbracketNode3);
        }
	nodeList.add(pemptybracketsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce APlusSign */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSign psignNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        psignNode1 = new APlusSign(tplusNode2);
        }
	nodeList.add(psignNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AMinusSign */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSign psignNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        psignNode1 = new AMinusSign(tminusNode2);
        }
	nodeList.add(psignNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce APlusNumOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumOperations pnumoperationsNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pnumoperationsNode1 = new APlusNumOperations(tplusNode2);
        }
	nodeList.add(pnumoperationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AMinusNumOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumOperations pnumoperationsNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pnumoperationsNode1 = new AMinusNumOperations(tminusNode2);
        }
	nodeList.add(pnumoperationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AMultNumOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumOperations pnumoperationsNode1;
        {
            // Block
        TMult tmultNode2;
        tmultNode2 = (TMult)nodeArrayList1.get(0);

        pnumoperationsNode1 = new AMultNumOperations(tmultNode2);
        }
	nodeList.add(pnumoperationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AModNumOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumOperations pnumoperationsNode1;
        {
            // Block
        TKwMod tkwmodNode2;
        tkwmodNode2 = (TKwMod)nodeArrayList1.get(0);

        pnumoperationsNode1 = new AModNumOperations(tkwmodNode2);
        }
	nodeList.add(pnumoperationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ADivNumOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumOperations pnumoperationsNode1;
        {
            // Block
        TKwDiv tkwdivNode2;
        tkwdivNode2 = (TKwDiv)nodeArrayList1.get(0);

        pnumoperationsNode1 = new ADivNumOperations(tkwdivNode2);
        }
	nodeList.add(pnumoperationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AOrLogicOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicOperations plogicoperationsNode1;
        {
            // Block
        TKwOr tkworNode2;
        tkworNode2 = (TKwOr)nodeArrayList1.get(0);

        plogicoperationsNode1 = new AOrLogicOperations(tkworNode2);
        }
	nodeList.add(plogicoperationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AAndLogicOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicOperations plogicoperationsNode1;
        {
            // Block
        TKwAnd tkwandNode2;
        tkwandNode2 = (TKwAnd)nodeArrayList1.get(0);

        plogicoperationsNode1 = new AAndLogicOperations(tkwandNode2);
        }
	nodeList.add(plogicoperationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AEqualsComparisonSymbols */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparisonSymbols pcomparisonsymbolsNode1;
        {
            // Block
        TEquals tequalsNode2;
        tequalsNode2 = (TEquals)nodeArrayList1.get(0);

        pcomparisonsymbolsNode1 = new AEqualsComparisonSymbols(tequalsNode2);
        }
	nodeList.add(pcomparisonsymbolsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANotEqualsComparisonSymbols */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparisonSymbols pcomparisonsymbolsNode1;
        {
            // Block
        TNotEqual tnotequalNode2;
        tnotequalNode2 = (TNotEqual)nodeArrayList1.get(0);

        pcomparisonsymbolsNode1 = new ANotEqualsComparisonSymbols(tnotequalNode2);
        }
	nodeList.add(pcomparisonsymbolsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ALessThanComparisonSymbols */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparisonSymbols pcomparisonsymbolsNode1;
        {
            // Block
        TLessThan tlessthanNode2;
        tlessthanNode2 = (TLessThan)nodeArrayList1.get(0);

        pcomparisonsymbolsNode1 = new ALessThanComparisonSymbols(tlessthanNode2);
        }
	nodeList.add(pcomparisonsymbolsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AGreaterThanComparisonSymbols */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparisonSymbols pcomparisonsymbolsNode1;
        {
            // Block
        TGreaterThan tgreaterthanNode2;
        tgreaterthanNode2 = (TGreaterThan)nodeArrayList1.get(0);

        pcomparisonsymbolsNode1 = new AGreaterThanComparisonSymbols(tgreaterthanNode2);
        }
	nodeList.add(pcomparisonsymbolsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AGreaterOrEqualComparisonSymbols */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparisonSymbols pcomparisonsymbolsNode1;
        {
            // Block
        TGreaterThanEqual tgreaterthanequalNode2;
        tgreaterthanequalNode2 = (TGreaterThanEqual)nodeArrayList1.get(0);

        pcomparisonsymbolsNode1 = new AGreaterOrEqualComparisonSymbols(tgreaterthanequalNode2);
        }
	nodeList.add(pcomparisonsymbolsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ALessOrEqualComparisonSymbols */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparisonSymbols pcomparisonsymbolsNode1;
        {
            // Block
        TLessThanEqual tlessthanequalNode2;
        tlessthanequalNode2 = (TLessThanEqual)nodeArrayList1.get(0);

        pcomparisonsymbolsNode1 = new ALessOrEqualComparisonSymbols(tlessthanequalNode2);
        }
	nodeList.add(pcomparisonsymbolsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ATerminal$LocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PLocalDefinition plocaldefinitionNode1;
        plocaldefinitionNode1 = (PLocalDefinition)nodeArrayList1.get(0);
	if(plocaldefinitionNode1 != null)
	{
	  listNode2.add(plocaldefinitionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ANonTerminal$LocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PLocalDefinition plocaldefinitionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefinitionNode2 = (PLocalDefinition)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefinitionNode2 != null)
	{
	  listNode3.add(plocaldefinitionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ATerminal$NextFparDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PNextFparDefinition pnextfpardefinitionNode1;
        pnextfpardefinitionNode1 = (PNextFparDefinition)nodeArrayList1.get(0);
	if(pnextfpardefinitionNode1 != null)
	{
	  listNode2.add(pnextfpardefinitionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ANonTerminal$NextFparDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PNextFparDefinition pnextfpardefinitionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pnextfpardefinitionNode2 = (PNextFparDefinition)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pnextfpardefinitionNode2 != null)
	{
	  listNode3.add(pnextfpardefinitionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ATerminal$NextIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PNextIdentifier pnextidentifierNode1;
        pnextidentifierNode1 = (PNextIdentifier)nodeArrayList1.get(0);
	if(pnextidentifierNode1 != null)
	{
	  listNode2.add(pnextidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ANonTerminal$NextIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PNextIdentifier pnextidentifierNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pnextidentifierNode2 = (PNextIdentifier)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pnextidentifierNode2 != null)
	{
	  listNode3.add(pnextidentifierNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ATerminal$ArraySize */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArraySize parraysizeNode1;
        parraysizeNode1 = (PArraySize)nodeArrayList1.get(0);
	if(parraysizeNode1 != null)
	{
	  listNode2.add(parraysizeNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ANonTerminal$ArraySize */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArraySize parraysizeNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parraysizeNode2 = (PArraySize)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parraysizeNode2 != null)
	{
	  listNode3.add(parraysizeNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ATerminal$NextExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PNextExpression pnextexpressionNode1;
        pnextexpressionNode1 = (PNextExpression)nodeArrayList1.get(0);
	if(pnextexpressionNode1 != null)
	{
	  listNode2.add(pnextexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ANonTerminal$NextExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PNextExpression pnextexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pnextexpressionNode2 = (PNextExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pnextexpressionNode2 != null)
	{
	  listNode3.add(pnextexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {37, SHIFT, 5}, },
			{{-1, ERROR, 2}, {41, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {0, SHIFT, 1}, {1, SHIFT, 6}, {12, SHIFT, 7}, },
			{{-1, ERROR, 5}, {14, SHIFT, 15}, },
			{{-1, ERROR, 6}, {37, SHIFT, 16}, },
			{{-1, ERROR, 7}, {5, SHIFT, 17}, {6, SHIFT, 18}, {11, SHIFT, 19}, {12, SHIFT, 7}, {13, SHIFT, 20}, {19, SHIFT, 21}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 9}, {0, SHIFT, 1}, {1, SHIFT, 6}, {12, SHIFT, 7}, {19, SHIFT, 30}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 14}, {0, SHIFT, 1}, {1, SHIFT, 6}, {12, SHIFT, 7}, },
			{{-1, ERROR, 15}, {9, SHIFT, 33}, },
			{{-1, ERROR, 16}, {18, SHIFT, 35}, {20, SHIFT, 36}, },
			{{-1, ERROR, 17}, {14, SHIFT, 39}, {22, SHIFT, 40}, {23, SHIFT, 41}, {36, SHIFT, 42}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, ERROR, 18}, {14, SHIFT, 39}, {22, SHIFT, 40}, {23, SHIFT, 41}, {36, SHIFT, 42}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, ERROR, 19}, {14, SHIFT, 51}, {19, SHIFT, 52}, {22, SHIFT, 40}, {23, SHIFT, 41}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 48}, {14, SHIFT, 54}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 27}, {19, SHIFT, 55}, },
			{{-1, ERROR, 28}, {16, SHIFT, 56}, {21, SHIFT, 57}, },
			{{-1, ERROR, 29}, {5, SHIFT, 17}, {6, SHIFT, 18}, {11, SHIFT, 19}, {12, SHIFT, 7}, {13, SHIFT, 58}, {19, SHIFT, 21}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 33}, {37, SHIFT, 60}, },
			{{-1, ERROR, 34}, {15, SHIFT, 61}, {19, SHIFT, 62}, },
			{{-1, ERROR, 35}, {37, SHIFT, 65}, },
			{{-1, ERROR, 36}, {2, SHIFT, 66}, {3, SHIFT, 67}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 38}, {18, SHIFT, 35}, {20, SHIFT, 70}, },
			{{-1, ERROR, 39}, {14, SHIFT, 39}, {22, SHIFT, 40}, {23, SHIFT, 41}, {36, SHIFT, 42}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 42}, {14, SHIFT, 39}, {22, SHIFT, 40}, {23, SHIFT, 41}, {36, SHIFT, 42}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 54}, {16, SHIFT, 56}, },
			{{-1, ERROR, 47}, {30, SHIFT, 75}, {31, SHIFT, 76}, {32, SHIFT, 77}, {33, SHIFT, 78}, {34, SHIFT, 79}, {35, SHIFT, 80}, },
			{{-1, ERROR, 48}, {4, SHIFT, 82}, },
			{{-1, ERROR, 49}, {14, SHIFT, 51}, {22, SHIFT, 40}, {23, SHIFT, 41}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, ERROR, 50}, {8, SHIFT, 84}, },
			{{-1, ERROR, 51}, {14, SHIFT, 51}, {22, SHIFT, 40}, {23, SHIFT, 41}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 53}, {19, SHIFT, 86}, },
			{{-1, ERROR, 54}, {14, SHIFT, 51}, {15, SHIFT, 87}, {22, SHIFT, 40}, {23, SHIFT, 41}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 56}, {14, SHIFT, 51}, {17, SHIFT, 90}, {22, SHIFT, 40}, {23, SHIFT, 41}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, ERROR, 57}, {14, SHIFT, 51}, {22, SHIFT, 40}, {23, SHIFT, 41}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 60}, {18, SHIFT, 35}, {20, SHIFT, 93}, },
			{{-1, ERROR, 61}, {20, SHIFT, 95}, },
			{{-1, ERROR, 62}, {9, SHIFT, 33}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 64}, {15, SHIFT, 97}, {19, SHIFT, 62}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 17}, {16, SHIFT, 99}, },
			{{-1, ERROR, 69}, {19, SHIFT, 102}, },
			{{-1, ERROR, 70}, {2, SHIFT, 66}, {3, SHIFT, 67}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 72}, {15, SHIFT, 104}, {30, SHIFT, 75}, {31, SHIFT, 76}, {32, SHIFT, 77}, {33, SHIFT, 78}, {34, SHIFT, 79}, {35, SHIFT, 80}, },
			{{-1, ERROR, 73}, {15, SHIFT, 105}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 81}, {14, SHIFT, 51}, {22, SHIFT, 40}, {23, SHIFT, 41}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, ERROR, 82}, {5, SHIFT, 17}, {6, SHIFT, 18}, {11, SHIFT, 19}, {12, SHIFT, 7}, {19, SHIFT, 21}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 84}, {5, SHIFT, 108}, {6, SHIFT, 109}, {11, SHIFT, 110}, {12, SHIFT, 7}, {19, SHIFT, 111}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, ERROR, 85}, {15, SHIFT, 104}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 62}, {18, SHIFT, 118}, },
			{{-1, ERROR, 89}, {15, SHIFT, 121}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 91}, {17, SHIFT, 122}, },
			{{-1, ERROR, 92}, {19, SHIFT, 123}, },
			{{-1, ERROR, 93}, {2, SHIFT, 66}, {3, SHIFT, 67}, },
			{{-1, ERROR, 94}, {18, SHIFT, 35}, {20, SHIFT, 126}, },
			{{-1, ERROR, 95}, {2, SHIFT, 66}, {3, SHIFT, 67}, {10, SHIFT, 127}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 97}, {20, SHIFT, 130}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 99}, {38, SHIFT, 131}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 18}, {16, SHIFT, 99}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 103}, {19, SHIFT, 133}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 108}, {14, SHIFT, 39}, {22, SHIFT, 40}, {23, SHIFT, 41}, {36, SHIFT, 42}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, ERROR, 109}, {14, SHIFT, 39}, {22, SHIFT, 40}, {23, SHIFT, 41}, {36, SHIFT, 42}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, ERROR, 110}, {14, SHIFT, 51}, {19, SHIFT, 136}, {22, SHIFT, 40}, {23, SHIFT, 41}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 27}, {7, REDUCE, 37}, },
			{{-1, REDUCE, 30}, {7, REDUCE, 40}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 114}, {7, SHIFT, 138}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 116}, {19, SHIFT, 139}, },
			{{-1, ERROR, 117}, {16, SHIFT, 56}, {21, SHIFT, 140}, },
			{{-1, ERROR, 118}, {14, SHIFT, 51}, {22, SHIFT, 40}, {23, SHIFT, 41}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 63}, {18, SHIFT, 118}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 20}, {16, SHIFT, 143}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 126}, {2, SHIFT, 66}, {3, SHIFT, 67}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 130}, {2, SHIFT, 66}, {3, SHIFT, 67}, {10, SHIFT, 127}, },
			{{-1, ERROR, 131}, {17, SHIFT, 148}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 134}, {4, SHIFT, 149}, },
			{{-1, ERROR, 135}, {8, SHIFT, 150}, },
			{{-1, REDUCE, 33}, {7, REDUCE, 43}, },
			{{-1, ERROR, 137}, {19, SHIFT, 151}, },
			{{-1, ERROR, 138}, {5, SHIFT, 17}, {6, SHIFT, 18}, {11, SHIFT, 19}, {12, SHIFT, 7}, {19, SHIFT, 21}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 31}, {7, REDUCE, 41}, },
			{{-1, ERROR, 140}, {14, SHIFT, 51}, {22, SHIFT, 40}, {23, SHIFT, 41}, {37, SHIFT, 22}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 143}, {17, SHIFT, 154}, {38, SHIFT, 131}, },
			{{-1, REDUCE, 21}, {16, SHIFT, 99}, },
			{{-1, REDUCE, 22}, {16, SHIFT, 99}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 149}, {5, SHIFT, 108}, {6, SHIFT, 109}, {11, SHIFT, 110}, {12, SHIFT, 7}, {19, SHIFT, 111}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, ERROR, 150}, {5, SHIFT, 108}, {6, SHIFT, 109}, {11, SHIFT, 110}, {12, SHIFT, 7}, {19, SHIFT, 111}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 34}, {7, REDUCE, 44}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 153}, {19, SHIFT, 158}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 23}, {16, SHIFT, 99}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 157}, {7, SHIFT, 159}, },
			{{-1, REDUCE, 28}, {7, REDUCE, 38}, },
			{{-1, ERROR, 159}, {5, SHIFT, 108}, {6, SHIFT, 109}, {11, SHIFT, 110}, {12, SHIFT, 7}, {19, SHIFT, 111}, {37, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 45}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 8}, {0, 3}, },
			{{-1, 9}, {0, 4}, },
			{{-1, 10}, {14, 31}, },
			{{-1, 24}, {4, 11}, {9, 11}, {14, 32}, {84, 112}, {149, 112}, {150, 112}, {159, 112}, },
			{{-1, 34}, {62, 96}, },
			{{-1, 63}, {64, 98}, },
			{{-1, 128}, {130, 147}, },
			{{-1, 68}, {93, 124}, {95, 129}, {126, 124}, {130, 129}, },
			{{-1, 69}, {70, 103}, },
			{{-1, 12}, },
			{{-1, 125}, {126, 146}, },
			{{-1, 13}, },
			{{-1, 37}, {38, 71}, {94, 71}, },
			{{-1, 107}, {7, 25}, {29, 59}, {84, 113}, {138, 152}, {150, 113}, {159, 152}, },
			{{-1, 26}, },
			{{-1, 114}, {149, 156}, {150, 157}, {159, 160}, },
			{{-1, 115}, },
			{{-1, 45}, {7, 27}, {29, 27}, {82, 27}, {84, 116}, {138, 27}, {149, 116}, {150, 116}, {159, 116}, },
			{{-1, 46}, {7, 28}, {29, 28}, {82, 28}, {84, 117}, {138, 28}, {149, 117}, {150, 117}, {159, 117}, },
			{{-1, 47}, {19, 53}, {39, 72}, {49, 83}, {51, 85}, {54, 88}, {56, 91}, {57, 92}, {81, 106}, {110, 137}, {118, 141}, {140, 153}, },
			{{-1, 48}, {18, 50}, {39, 73}, {42, 74}, {108, 134}, {109, 135}, },
			{{-1, 119}, {120, 142}, },
			{{-1, 89}, },
			{{-1, 100}, {101, 132}, {145, 132}, {155, 132}, },
			{{-1, 144}, },
			{{-1, 49}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 81}, },
			{{-1, 14}, },
			{{-1, 64}, },
			{{-1, 29}, },
			{{-1, 38}, {60, 94}, },
			{{-1, 101}, {124, 145}, {144, 155}, },
			{{-1, 120}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'fun'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: 'fun', 'var', '{'",
			"expecting: '('",
			"expecting: 'while', 'if', 'return', '{', '}', semicolon, identifier, string literal",
			"expecting: 'fun', 'var', '{', semicolon",
			"expecting: 'fun', 'var', '{', EOF",
			"expecting: 'ref'",
			"expecting: ',', ':'",
			"expecting: '(', '+', '-', 'not', identifier, int const, char const, string literal",
			"expecting: '(', semicolon, '+', '-', identifier, int const, char const, string literal",
			"expecting: 'fun', 'var', 'while', 'if', 'else', 'return', '{', '}', semicolon, identifier, string literal, EOF",
			"expecting: 'do', 'then', '(', ')', '[', ']', ',', semicolon, '<-', '#', '=', '<', '<=', '>', '>='",
			"expecting: 'do', 'then', ')', '[', ']', ',', semicolon, '<-', '#', '=', '<', '<=', '>', '>='",
			"expecting: semicolon",
			"expecting: '[', '<-'",
			"expecting: ')', semicolon",
			"expecting: 'char', 'int'",
			"expecting: '(', '+', '-', identifier, int const, char const, string literal",
			"expecting: 'do', 'then', ')', ']', ',', semicolon, '#', '=', '<', '<=', '>', '>='",
			"expecting: 'do', 'then', ')', '[', ']', ',', semicolon, '#', '=', '<', '<=', '>', '>='",
			"expecting: '#', '=', '<', '<=', '>', '>='",
			"expecting: 'do'",
			"expecting: 'then'",
			"expecting: '(', ')', '+', '-', identifier, int const, char const, string literal",
			"expecting: '(', ']', '+', '-', identifier, int const, char const, string literal",
			"expecting: ':'",
			"expecting: 'fun', 'var', '{', ')', '[', semicolon",
			"expecting: '[', semicolon",
			"expecting: ')', '#', '=', '<', '<=', '>', '>='",
			"expecting: ')'",
			"expecting: 'do', 'then', ')'",
			"expecting: 'while', 'if', 'return', '{', semicolon, identifier, string literal",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: 'char', 'int', 'nothing'",
			"expecting: int const",
			"expecting: ')', '[', semicolon",
			"expecting: 'while', 'if', 'else', 'return', '{', '}', semicolon, identifier, string literal",
			"expecting: 'else'",
			"expecting: ']', int const",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 1, 5, 3, 6, 3, 7, 3, 3, 3, 8, 9, 10, 10, 11, 12, 5, 13, 14, 5, 5, 5, 15, 16, 5, 3, 3, 7, 1, 17, 1, 18, 9, 9, 10, 19, 19, 10, 20, 20, 20, 21, 22, 23, 19, 24, 19, 5, 15, 25, 5, 26, 19, 12, 5, 9, 27, 8, 17, 17, 9, 28, 28, 29, 15, 18, 9, 30, 31, 32, 19, 19, 19, 19, 19, 19, 19, 33, 20, 33, 31, 5, 20, 34, 31, 14, 35, 15, 18, 9, 36, 17, 27, 17, 37, 38, 29, 3, 15, 20, 32, 32, 5, 10, 10, 11, 39, 39, 5, 40, 40, 15, 16, 19, 34, 34, 20, 14, 5, 38, 17, 18, 6, 6, 6, 36, 35, 38, 3, 23, 24, 39, 15, 33, 39, 19, 34, 34, 41, 38, 38, 17, 6, 38, 33, 33, 39, 5, 15, 38, 38, 40, 40, 39, 33, 40, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
